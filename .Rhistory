p_mis_50 <- .50
balanced_panel_data_mnar_50 <- balanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_50 <- 0.5 + .2 * balanced_panel_data_mnar_50$EmploymentTypes +
0.1 * balanced_panel_data_mnar_50$Age +
0.5 * balanced_panel_data_mnar_50$Income + rnorm(nrow(balanced_panel_data), 0, 1)
mis_simulated_mnar_50 <- mis_simulated_mnar_50 < quantile(mis_simulated_mnar_50, p_mis_50)
balanced_panel_data_mnar_50$Income[mis_simulated_mnar_50] <- NA
summary(balanced_panel_data_mnar_50)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- .30
balanced_panel_data_mnar_30 <- balanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_30 <- 0.7 + 0.1 * balanced_panel_data_mnar_30$EmploymentTypes +
0.2 * balanced_panel_data_mnar_30$Age +
0.5 * balanced_panel_data_mnar_30$Income + rnorm(nrow(balanced_panel_data), 0, 1)
mis_simulated_mnar_30 <- mis_simulated_mnar_30 < quantile(mis_simulated_mnar_30, p_mis_30)
balanced_panel_data_mnar_30$Income[mis_simulated_mnar_30] <- NA
summary(balanced_panel_data_mnar_30)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- .10
balanced_panel_data_mnar_10 <- balanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_10 <- 0.1 + 0.1 * balanced_panel_data_mnar_10$EmploymentTypes +
0.2 * balanced_panel_data_mnar_10$Age +
0.5 * balanced_panel_data_mnar_10$Income + rnorm(nrow(balanced_panel_data), 0, 1)
mis_simulated_mnar_10 <- mis_simulated_mnar_10 < quantile(mis_simulated_mnar_10, p_mis_10)
balanced_panel_data_mnar_10$Income[mis_simulated_mnar_10] <- NA
summary(balanced_panel_data_mnar_10)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
###########################################
## Simulating Missingness in Unalanced Panel
###########################################
#### MCAR ####
##############
#### 50% ####
p_mis_50 <- 0.50
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_50 <- sample(1:num_rows, p_mis_50 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_50 <- unbalanced_panel_data
unbalanced_panel_data_mcar_50[mis_simulated_mcar_50, 4] <- NA
summary(unbalanced_panel_data_mcar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- 0.30
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_30 <- sample(1:num_rows, p_mis_30 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_30 <- unbalanced_panel_data
unbalanced_panel_data_mcar_30[mis_simulated_mcar_30, 4] <- NA
summary(unbalanced_panel_data_mcar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- 0.10
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_10 <- sample(1:num_rows, p_mis_10 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_10 <- unbalanced_panel_data
unbalanced_panel_data_mcar_10[mis_simulated_mcar_10, 4] <- NA
summary(unbalanced_panel_data_mcar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MAR ####
#############
#### 50% ####
unbalanced_panel_data_mar_50 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.5  # 50% missingness
# Depending on EmploymentTypes, Age, and random error
mis_simulated_mar_50 <- 0.5 + 0.1 * unbalanced_panel_data_mar_50$EmploymentTypes +
0.2 * unbalanced_panel_data_mar_50$Age +
rnorm(nrow(unbalanced_panel_data_mar_50), 0, 1)
mis_simulated_mar_50 <- mis_simulated_mar_50 < quantile(mis_simulated_mar_50, p_mis_50) # All below the 50% quantile are set to missing
mean(as.numeric(mis_simulated_mar_50))
unbalanced_panel_data_mar_50$Income[mis_simulated_mar_50] <- NA # Set values to NA in Income where missingness occurs
summary(unbalanced_panel_data_mar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
unbalanced_panel_data_mar_30 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.3  # 30% missingness
# Depending on EmploymentTypes, Age, and random error
mis_simulated_mar_30 <- 0.7 + 0.1 * unbalanced_panel_data_mar_30$EmploymentTypes +
0.2 * unbalanced_panel_data_mar_30$Age +
rnorm(nrow(unbalanced_panel_data_mar_30), 0, 1)
mis_simulated_mar_30 <- mis_simulated_mar_30 < quantile(mis_simulated_mar_30, p_mis_30) # All below the 50% quantile are set to missing
mean(as.numeric(mis_simulated_mar_30))
unbalanced_panel_data_mar_30$Income[mis_simulated_mar_30] <- NA # Set values to NA in Income where missingness occurs
summary(unbalanced_panel_data_mar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
unbalanced_panel_data_mar_10 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.1  # 10% missingness
# Depending on EmploymentTypes, Age, and random error
mis_simulated_mar_10 <- 0.1 + 0.1 * unbalanced_panel_data_mar_10$EmploymentTypes +
0.2 * unbalanced_panel_data_mar_10$Age +
rnorm(nrow(unbalanced_panel_data_mar_10), 0, 1)
mis_simulated_mar_10 <- mis_simulated_mar_10 < quantile(mis_simulated_mar_10, p_mis_10) # All below the 50% quantile are set to missing
mean(as.numeric(mis_simulated_mar_10))
unbalanced_panel_data_mar_10$Income[mis_simulated_mar_10] <- NA # Set values to NA in Income where missingness occurs
summary(unbalanced_panel_data_mar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MNAR ####
##############
#### Probabilistic, Linear Regression model ####
#### 50% ####
p_mis_50 <- .50
unbalanced_panel_data_mnar_50 <- unbalanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_50 <- 0.5 + 0.1 * unbalanced_panel_data_mnar_50$EmploymentTypes +
0.2 * unbalanced_panel_data_mnar_50$Age +
0.5 * unbalanced_panel_data_mnar_50$Income + rnorm(nrow(unbalanced_panel_data), 0, 1)
mis_simulated_mnar_50 <- mis_simulated_mnar_50 < quantile(mis_simulated_mnar_50, p_mis_50)
unbalanced_panel_data_mnar_50$Income[mis_simulated_mnar_50] <- NA
summary(unbalanced_panel_data_mnar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- .30
unbalanced_panel_data_mnar_30 <- unbalanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_30 <-0.7 + 0.1 * unbalanced_panel_data_mnar_30$EmploymentTypes +
0.2 * unbalanced_panel_data_mnar_30$Age +
0.5 * unbalanced_panel_data_mnar_30$Income + rnorm(nrow(unbalanced_panel_data), 0, 1)
mis_simulated_mnar_30 <- mis_simulated_mnar_30 < quantile(mis_simulated_mnar_30, p_mis_30)
unbalanced_panel_data_mnar_30$Income[mis_simulated_mnar_30] <- NA
summary(unbalanced_panel_data_mnar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- .10
unbalanced_panel_data_mnar_10 <- unbalanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_10 <- 0.1 + 0.1 * unbalanced_panel_data_mnar_10$EmploymentTypes +
0.2 * unbalanced_panel_data_mnar_10$Age +
0.5 * unbalanced_panel_data_mnar_10$Income + rnorm(nrow(unbalanced_panel_data), 0, 1)
mis_simulated_mnar_10 <- mis_simulated_mnar_10 < quantile(mis_simulated_mnar_10, p_mis_10)
unbalanced_panel_data_mnar_10$Income[mis_simulated_mnar_10] <- NA
summary(unbalanced_panel_data_mnar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#####################################
### Datasets Overview and Formating
####################################
## Format Vriable to Their Originl Format
convert_DataTypes <- function(df) {
df$ID <- as.factor(df$ID)
df$Year <- as.factor(df$Year)
df$age <- as.integer(df$Age)
df$EmploymentTypes <- as.factor(df$EmploymentTypes)
df$Income <- as.numeric(df$Income)
df$MaritalStatus <- as.factor(df$MaritalStatus)
df$EmploymentHours <- as.factor(df$EmploymentHours)
df$Education <- as.factor(df$Education)
df$Sex <- as.factor(df$Sex)
df <- pdata.frame(df, index = c("ID", "Year")) # Convert the data frame to a panel data frame
df <- df[c("ID", "Year", "Age", "EmploymentTypes", "Income", "MaritalStatus", "EmploymentHours", "Education", "Sex")]
return(df)
}
balanced_panel_data <- convert_DataTypes(balanced_panel_data)
unbalanced_panel_data <- convert_DataTypes(unbalanced_panel_data)
balanced_panel_data_mcar_50 <- convert_DataTypes(balanced_panel_data_mcar_50)
balanced_panel_data_mcar_30 <- convert_DataTypes(balanced_panel_data_mcar_30)
balanced_panel_data_mcar_10 <- convert_DataTypes(balanced_panel_data_mcar_10)
balanced_panel_data_mar_50 <- convert_DataTypes(balanced_panel_data_mar_50)
balanced_panel_data_mar_30 <- convert_DataTypes(balanced_panel_data_mar_30)
balanced_panel_data_mar_10 <- convert_DataTypes(balanced_panel_data_mar_10)
balanced_panel_data_mnar_50 <- convert_DataTypes(balanced_panel_data_mnar_50)
balanced_panel_data_mnar_30 <- convert_DataTypes(balanced_panel_data_mnar_30)
balanced_panel_data_mnar_10 <- convert_DataTypes(balanced_panel_data_mnar_10)
unbalanced_panel_data_mcar_50 <- convert_DataTypes(unbalanced_panel_data_mcar_50)
unbalanced_panel_data_mcar_30 <- convert_DataTypes(unbalanced_panel_data_mcar_30)
unbalanced_panel_data_mcar_10 <- convert_DataTypes(unbalanced_panel_data_mcar_10)
unbalanced_panel_data_mar_50 <- convert_DataTypes(unbalanced_panel_data_mar_50)
unbalanced_panel_data_mar_30 <- convert_DataTypes(unbalanced_panel_data_mar_30)
unbalanced_panel_data_mar_10 <- convert_DataTypes(unbalanced_panel_data_mar_10)
unbalanced_panel_data_mnar_50 <- convert_DataTypes(unbalanced_panel_data_mnar_50)
unbalanced_panel_data_mnar_30 <- convert_DataTypes(unbalanced_panel_data_mnar_30)
unbalanced_panel_data_mnar_10 <- convert_DataTypes(unbalanced_panel_data_mnar_10)
# balanced_panel_data_mcar_50
# balanced_panel_data_mcar_30
# balanced_panel_data_mcar_10
# balanced_panel_data_mar_50
# balanced_panel_data_mar_30
# balanced_panel_data_mar_10
# balanced_panel_data_mnar_50
# balanced_panel_data_mnar_30
# balanced_panel_data_mnar_10
# unbalanced_panel_data_mcar_50
# unbalanced_panel_data_mcar_30
# unbalanced_panel_data_mcar_10
# unbalanced_panel_data_mar_50
# unbalanced_panel_data_mar_30
# unbalanced_panel_data_mar_10
# unbalanced_panel_data_mnar_50
# unbalanced_panel_data_mnar_30
# unbalanced_panel_data_mnar_10
######################
## Data Imputation
######################
## mice ##
##########
packageVersion("mice")
StartTime_mice <- Sys.time()  # Starting time
Data_Imputation_mice <- function(data, IDColumn = "ID", TargetColumn = "Income",
LaggedColumns = c("EmploymentTypes", "MaritalStatus", "Sex", "Income"),
m = 5, maxit = 100, method = "pmm") {
# Making ID factor and year numeric for proper lagging
data[[IDColumn]] <- as.factor(data[[IDColumn]])
data$Year <- as.numeric(data$Year)
# Generate lagging variables
for (col in LaggedColumns) {
LaggedNames <- paste0("lag_", col)
data <- data %>%
group_by(!!sym(IDColumn)) %>%
arrange(Year, .by_group = TRUE) %>%
mutate(!!sym(LaggedNames) := lag(!!sym(col))) %>%
ungroup()
}
# Remove the rows due to existing missing values in other columns. For example: first year for each ID
LaggedVars <- paste0("lag_", LaggedColumns)
data <- data %>% filter(rowSums(is.na(select(., all_of(LaggedVars)))) == 0)
PredMat <- make.predictorMatrix(data) # matrix of predictors
PredMat[, IDColumn] <- 0 # Remove ID from the list of predictors
PredMat[, ] <- 0
PredMat[colnames(PredMat) %in% c("lag_EmploymentTypes", "lag_MaritalStatus",
"lag_Sex", "lag_Income", "Age"), TargetColumn] <- 1
ImputedData <- mice(data, m = m, maxit = maxit, method = method, predictorMatrix = PredMat) # Implement mice
# Get the original rows and the imputed Income
CompletedData <- lapply(1:m, function(i) complete(ImputedData, action = i))
OriginalColumns <- c("ID", "Year", "Age", "EmploymentTypes", "Income", "MaritalStatus",
"EmploymentHours", "Education", "Sex")
CompletedData <- lapply(CompletedData, function(df) df[, OriginalColumns])
return(CompletedData)
}
# Apply imputation
mice_bal_mcar_50 <- Data_Imputation_mice(balanced_panel_data_mcar_50)
mice_bal_mcar_30 <- Data_Imputation_mice(balanced_panel_data_mcar_30)
mice_bal_mcar_10 <- Data_Imputation_mice(balanced_panel_data_mcar_10)
mice_bal_mar_50 <- Data_Imputation_mice(balanced_panel_data_mar_50)
mice_bal_mar_30 <- Data_Imputation_mice(balanced_panel_data_mar_30)
mice_bal_mar_10 <- Data_Imputation_mice(balanced_panel_data_mar_10)
mice_bal_mnar_50 <- Data_Imputation_mice(balanced_panel_data_mnar_50)
mice_bal_mnar_30 <- Data_Imputation_mice(balanced_panel_data_mnar_30)
mice_bal_mnar_10 <- Data_Imputation_mice(balanced_panel_data_mnar_10)
mice_unbal_mcar_50 <- Data_Imputation_mice(unbalanced_panel_data_mcar_50)
mice_unbal_mcar_30 <- Data_Imputation_mice(unbalanced_panel_data_mcar_30)
mice_unbal_mcar_10 <- Data_Imputation_mice(unbalanced_panel_data_mcar_10)
mice_unbal_mar_50 <- Data_Imputation_mice(unbalanced_panel_data_mar_50)
mice_unbal_mar_30 <- Data_Imputation_mice(unbalanced_panel_data_mar_30)
mice_unbal_mar_10 <- Data_Imputation_mice(unbalanced_panel_data_mar_10)
mice_unbal_mnar_50 <- Data_Imputation_mice(unbalanced_panel_data_mnar_50)
mice_unbal_mnar_30 <- Data_Imputation_mice(unbalanced_panel_data_mnar_30)
mice_unbal_mnar_10 <- Data_Imputation_mice(unbalanced_panel_data_mnar_10)
EndTime_mice <- Sys.time()  # Ending time
ExecutionTime_mice <- EndTime_mice - StartTime_mice
print(ExecutionTime_mice) # Time difference of 13.11498 mins
##### mice #####
###############
miceData <- function(data) {
CombinedData <- do.call(rbind, data)
return(CombinedData)
}
# Data Combination
mice_imp_bal_mcar_50 <- miceData(mice_bal_mcar_50)
mice_imp_bal_mcar_30 <- miceData(mice_bal_mcar_30)
mice_imp_bal_mcar_10 <- miceData(mice_bal_mcar_10)
mice_imp_bal_mar_50 <- miceData(mice_bal_mar_50)
mice_imp_bal_mar_30 <- miceData(mice_bal_mar_30)
mice_imp_bal_mar_10 <- miceData(mice_bal_mar_10)
mice_imp_bal_mnar_50 <- miceData(mice_bal_mnar_50)
mice_imp_bal_mnar_30 <- miceData(mice_bal_mnar_30)
mice_imp_bal_mnar_10 <- miceData(mice_bal_mnar_10)
mice_imp_unbal_mcar_50 <- miceData(mice_unbal_mcar_50)
mice_imp_unbal_mcar_30 <- miceData(mice_unbal_mcar_30)
mice_imp_unbal_mcar_10 <- miceData(mice_unbal_mcar_10)
mice_imp_unbal_mar_50 <- miceData(mice_unbal_mar_50)
mice_imp_unbal_mar_30 <- miceData(mice_unbal_mar_30)
mice_imp_unbal_mar_10 <- miceData(mice_unbal_mar_10)
mice_imp_unbal_mnar_50 <- miceData(mice_unbal_mnar_50)
mice_imp_unbal_mnar_30 <- miceData(mice_unbal_mnar_30)
mice_imp_unbal_mnar_10 <- miceData(mice_unbal_mnar_10)
# plot distribution
IncDist_mice <- function(data, col){
DataTemp_mice <- density(data$Income, na.rm = TRUE)
lines(DataTemp_mice, col = col, lwd = 2)
}
DataTemp_mice <- density(balanced_panel_data$Income, na.rm = TRUE)
par(mfrow = c(2, 3))
plot(DataTemp_mice,
main = "Balanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mice(mice_imp_bal_mcar_50, "blue")
IncDist_mice(mice_imp_bal_mcar_30, "red")
IncDist_mice(mice_imp_bal_mcar_10, "green")
legend("topright",
legend = c("Initial Data", "bal_mcar_50", "bal_mcar_30", "bal_mcar_10"),
col = c("black", "blue", "red", "green"),
lwd = 2,
cex = 0.8)
plot(DataTemp_mice,
main = "Balanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mice(mice_imp_bal_mcar_50, "blue")
IncDist_mice(mice_imp_bal_mcar_30, "red")
IncDist_mice(mice_imp_bal_mcar_10, "green")
legend("topright",
legend = c("Initial Data", "bal_mcar_50", "bal_mcar_30", "bal_mcar_10"),
col = c("black", "blue", "red", "green"),
lwd = 2,
cex = 0.8)
plot(DataTemp_mice,
main = "Balanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mice(mice_imp_bal_mar_50, "blue")
IncDist_mice(mice_imp_bal_mar_30, "red")
IncDist_mice(mice_imp_bal_mar_10, "green")
legend("topright",
legend = c("Initial Data", "bal_mar_50", "bal_mar_30", "bal_mar_10"),
col = c("black", "blue", "red", "green"),
lwd = 2,
cex = 0.8)
DataTemp_mice <- density(unbalanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_mice,
main = "Unbalanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mice(mice_imp_unbal_mcar_50, "blue")
IncDist_mice(mice_imp_unbal_mcar_30, "red")
IncDist_mice(mice_imp_unbal_mcar_10, "green")
legend("topright",
legend = c("Initial Data", "unbal_mcar_50", "unbal_mcar_30", "unbal_mcar_10"),
col = c("black", "blue", "red", "green"),
lwd = 2,
cex = 0.8)
plot(DataTemp_mice,
main = "Unbalanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mice(mice_imp_unbal_mar_50, "blue")
IncDist_mice(mice_imp_unbal_mar_30, "red")
IncDist_mice(mice_imp_unbal_mar_10, "green")
legend("topright",
legend = c("Initial Data","unbal_mar_50", "unbal_mar_30", "unbal_mar_10"),
col = c("black", "blue", "red", "green"),
lwd = 2,
cex = 0.8)
plot(DataTemp_mice,
main = "Unbalanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mice(mice_imp_unbal_mnar_50, "blue")
IncDist_mice(mice_imp_unbal_mnar_30, "red")
IncDist_mice(mice_imp_unbal_mnar_10, "green")
legend("topright",
legend = c("Initial Data", "unbal_mnar_50", "unbal_mnar_30", "unbal_mnar_10"),
col = c("black", "blue", "red", "green"),
lwd = 2,
cex = 0.8)
# Function to impute data
Data_Imputation_mitml_Bal <- function(panel_data) {
SelectedData <- panel_data[c("ID", "Year", "Age", "EmploymentTypes", "Income", "MaritalStatus", "EmploymentHours", "Education", "Sex")]
# Define the type vector and assign column names
type <- c(-2, -1, 2, 2, 1, 2, 0, 0, 2)
names(type) <- colnames(SelectedData)
ImputedData <- panImpute(panel_data, type = type, n.burn = 1000, n.iter = 100, m = 5)   # Impute missing data
ImputedList <- mitmlComplete(ImputedData, print = "all")
return(ImputedList)
}
mitml_bal_mar_50 <- Data_Imputation_mitml_Bal(balanced_panel_data_mar_50)
# Data Combination
mitmlData <- function(data){
CombinedData <- do.call(rbind, data)
return(CombinedData)
}
legend("topright",
legend = c("Initial Data","unbal_mar_50", "unbal_mar_30", "unbal_mar_10"),
col = c("black", "blue", "red", "green"),
lwd = 2,
cex = 0.8)
### Plot Distribution
IncDist_mitml <- function(data, col) {
DataTemp_mitml <- density(data$Income, na.rm = TRUE)
lines(DataTemp_mitml, col = col, lwd = 2)
}
DataTemp_mitml <- density(balanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_mitml,
main = "Balanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mitml(mitml_imp_bal_mar_50, "blue")
# Data Combination
mitmlData <- function(data){
CombinedData <- do.call(rbind, data)
return(CombinedData)
}
mitml_imp_bal_mar_50 <- mitmlData(mitml_bal_mar_50)
### Plot Distribution
IncDist_mitml <- function(data, col) {
DataTemp_mitml <- density(data$Income, na.rm = TRUE)
lines(DataTemp_mitml, col = col, lwd = 2)
}
DataTemp_mitml <- density(balanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_mitml,
main = "Balanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mitml(mitml_imp_bal_mar_50, "blue")
