# Predict and replacing the missing values
MissingCase <- input_data[is.na(data$Income), ]
if (nrow(MissingCase) > 0) {
MissingArray <- array(as.matrix(MissingCase), dim = c(nrow(MissingCase), 1, ncol(MissingCase)))
PredictedValue <- model %>% predict(MissingArray)
data$Income[is.na(data$Income)] <- PredictedValue
}
return(data)
}
# Apply the function to the dataset
lstm_bal_mcar_50 <- Data_Imputation_LSTM(balanced_panel_data_mcar_50)
library(keras)
library(dplyr)
library(plm)
packageVersion("keras")
# Function to impute the datasets
Data_Imputation_LSTM <- function(data) {
# Temporarily replace the missing values with mean
DataTemp <- data %>%
mutate(Income = ifelse(is.na(Income), mean(Income, na.rm = TRUE), Income))
# Convert 'Education' to numeric to make it more compatible with the model and including other numeric columns
DataEncoded <- DataTemp %>%
mutate(Education = as.factor(Education)) %>%
select(Age, Income, Education)
DataEncoded <- as.data.frame(model.matrix(~ Education - 1, data = DataEncoded))
InputData <- cbind(Age = DataTemp$Age, Income = DataTemp$Income, DataEncoded)
CompleteCase <- InputData[!is.na(InputData$Income), ] # Ensuring there is no missing values during the training process
TrainArray <- array(as.matrix(CompleteCase), dim = c(nrow(CompleteCase), 1, ncol(CompleteCase)))   # Convert the data to a 3D array, which is more suitable for LSTM
# define and compile the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, input_shape = c(1, ncol(CompleteCase)), return_sequences = FALSE) %>%
layer_dense(units = 1)
model %>% compile(
loss = "mean_squared_error",
optimizer = optimizer_adam()
)
# Train the model
model %>% fit(
x = TrainArray,
y = CompleteCase$Income,  # Target is the Income column
epochs = 50,
batch_size = 32
)
# Predict and replacing the missing values
MissingCase <- input_data[is.na(data$Income), ]
if (nrow(MissingCase) > 0) {
MissingArray <- array(as.matrix(MissingCase), dim = c(nrow(MissingCase), 1, ncol(MissingCase)))
PredictedValue <- model %>% predict(MissingArray)
data$Income[is.na(data$Income)] <- PredictedValue
}
return(data)
}
# Apply the function to the dataset
lstm_bal_mcar_50 <- Data_Imputation_LSTM(balanced_panel_data_mcar_50)
# Function to impute the datasets
Data_Imputation_LSTM <- function(data) {
# Temporarily replace the missing values with mean
DataTemp <- data %>%
mutate(Income = ifelse(is.na(Income), mean(Income, na.rm = TRUE), Income))
# Convert 'Education' to numeric to make it more compatible with the model and including other numeric columns
DataEncoded <- DataTemp %>%
mutate(Education = as.factor(Education)) %>%
select(Age, Income, Education)
DataEncoded <- as.data.frame(model.matrix(~ Education - 1, data = DataEncoded))
InputData <- cbind(Age = DataTemp$Age, Income = DataTemp$Income, DataEncoded)
CompleteCase <- InputData[!is.na(InputData$Income), ] # Ensuring there is no missing values during the training process
TrainArray <- array(as.matrix(CompleteCase), dim = c(nrow(CompleteCase), 1, ncol(CompleteCase)))   # Convert the data to a 3D array, which is more suitable for LSTM
# define and compile the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, input_shape = c(1, ncol(CompleteCase)), return_sequences = FALSE) %>%
layer_dense(units = 1)
model %>% compile(
loss = "mean_squared_error",
optimizer = optimizer_adam()
)
# Train the model
model %>% fit(
x = TrainArray,
y = CompleteCase$Income,  # Target is the Income column
epochs = 50,
batch_size = 32
)
# Predict and replacing the missing values
MissingCase <- InputData[is.na(data$Income), ]
if (nrow(MissingCase) > 0) {
MissingArray <- array(as.matrix(MissingCase), dim = c(nrow(MissingCase), 1, ncol(MissingCase)))
PredictedValue <- model %>% predict(MissingArray)
data$Income[is.na(data$Income)] <- PredictedValue
}
return(data)
}
# Apply the function to the dataset
lstm_bal_mcar_50 <- Data_Imputation_LSTM(balanced_panel_data_mcar_50)
lstm_bal_mcar_50
# Function to generate coefficients and intercepts
Analyze_LSTM <- function(data) {
# Step 1: Imputa the missing values and convert the data into panel data
imputed_data <- Data_Imputation_LSTM(data)
pdata <- pdata.frame(imputed_data, index = c("ID", "Year"))
# Step 2: Perform Breusch-Pagan test to check the panel effects
bp_test <- plmtest(plm(Income ~ Year + Education + Age, data = pdata, model = "pooling"), type = "bp")
# Step 3: Based on the Breusch-Pagan test use appropriate models
if (bp_test$p.value > 0.05) {
# Pooled OLS for no panel effect
model <- plm(Income ~ Year + Education + Age, data = pdata, model = "pooling")
} else {
# Hausman test if panel effect exist
random_model <- plm(Income ~ Year + Education + Age, data = pdata, model = "random")
fixed_model <- plm(Income ~ Year + Education + Age, data = pdata, model = "within")
hausman_test <- phtest(fixed_model, random_model)
if (hausman_test$p.value <= 0.05) {
model <- fixed_model # Fixed effect model if correlation exists
} else {
model <- random_model # Random Effect model if correlation does not exist
}
}
# Step 4: Return the model summary
return(summary(model))
}
# Apply the function to each dataset and store results
analyze_lstm_bal_mcar_50 <- Analyze_LSTM(balanced_panel_data_mcar_50)
analyze_lstm_bal_mcar_50
# Function to impute the datasets
Data_Imputation_LSTM <- function(data) {
# Temporarily replace the missing values with mean
DataTemp <- data %>%
mutate(Income = ifelse(is.na(Income), mean(Income, na.rm = TRUE), Income))
# Convert 'Education' to numeric to make it more compatible with the model and including other numeric columns
DataEncoded <- DataTemp %>%
mutate(Education = as.factor(Education)) %>%
select(Age, Income, Education)
DataEncoded <- as.data.frame(model.matrix(~ Education - 1, data = DataEncoded))
InputData <- cbind(Age = DataTemp$Age, Income = DataTemp$Income, DataEncoded)
CompleteCase <- InputData[!is.na(InputData$Income), ]
TrainArray <- array(as.matrix(CompleteCase), dim = c(nrow(CompleteCase), 1, ncol(CompleteCase)))   # Because 3D array is more suitable for LSTM
# define and compile the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, input_shape = c(1, ncol(CompleteCase)), return_sequences = FALSE) %>%
layer_dense(units = 1)
model %>% compile(
loss = "mean_squared_error",
optimizer = optimizer_adam()
)
# Train the model
model %>% fit(
x = TrainArray,
y = CompleteCase$Income,  # Target is the Income column
epochs = 50,
batch_size = 32
)
# Predict and replacing the missing values
MissingCase <- InputData[is.na(data$Income), ]
if (nrow(MissingCase) > 0) {
MissingArray <- array(as.matrix(MissingCase), dim = c(nrow(MissingCase), 1, ncol(MissingCase)))
PredictedValue <- model %>% predict(MissingArray)
data$Income[is.na(data$Income)] <- PredictedValue
}
return(data)
}
# Apply the function to the dataset
lstm_bal_mcar_50 <- Data_Imputation_LSTM(balanced_panel_data_mcar_50)
lstm_bal_mcar_30 <- Data_Imputation_LSTM(balanced_panel_data_mcar_30)
lstm_bal_mcar_10 <- Data_Imputation_LSTM(balanced_panel_data_mcar_10)
lstm_bal_mar_50 <- Data_Imputation_LSTM(balanced_panel_data_mar_50)
lstm_bal_mar_30 <- Data_Imputation_LSTM(balanced_panel_data_mar_30)
lstm_bal_mar_10 <- Data_Imputation_LSTM(balanced_panel_data_mar_10)
lstm_bal_mnar_50 <- Data_Imputation_LSTM(balanced_panel_data_mnar_50)
lstm_bal_mnar_30 <- Data_Imputation_LSTM(balanced_panel_data_mnar_30)
lstm_bal_mnar_10 <- Data_Imputation_LSTM(balanced_panel_data_mnar_10)
lstm_unbal_mcar_50 <- Data_Imputation_LSTM(unbalanced_panel_data_mcar_50)
lstm_unbal_mcar_30 <- Data_Imputation_LSTM(unbalanced_panel_data_mcar_30)
lstm_unbal_mcar_10 <- Data_Imputation_LSTM(unbalanced_panel_data_mcar_10)
lstm_unbal_mar_50 <- Data_Imputation_LSTM(unbalanced_panel_data_mar_50)
lstm_unbal_mar_30 <- Data_Imputation_LSTM(unbalanced_panel_data_mar_30)
lstm_unbal_mar_10 <- Data_Imputation_LSTM(unbalanced_panel_data_mar_10)
lstm_unbal_mnar_50 <- Data_Imputation_LSTM(unbalanced_panel_data_mnar_50)
lstm_unbal_mnar_30 <- Data_Imputation_LSTM(unbalanced_panel_data_mnar_30)
lstm_unbal_mnar_10 <- Data_Imputation_LSTM(unbalanced_panel_data_mnar_10)
# Plot Distribution
IncDist_LSTM <- function(data, col) {
DataTemp_LSTM <- density(data$Income, na.rm = TRUE)
lines(DataTemp_LSTM, col = col, lwd = 2)
}
# Balanced Panel
DataTemp_LSTM <- density(data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Balanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_bal_mcar_50, "blue")
IncDist_LSTM(lstm_bal_mcar_30, "red")
IncDist_LSTM(lstm_bal_mcar_10, "pink")
IncDist_LSTM(lstm_bal_mar_50, "skyblue")
IncDist_LSTM(lstm_bal_mar_30, "violet")
IncDist_LSTM(lstm_bal_mar_10, "yellow")
IncDist_LSTM(lstm_bal_mnar_50, "orange")
IncDist_LSTM(lstm_bal_mnar_30, "green")
# Plot Distribution
IncDist_LSTM <- function(data, col) {
DataTemp_LSTM <- density(data$Income, na.rm = TRUE)
lines(DataTemp_LSTM, col = col, lwd = 2)
}
# Balanced Panel
DataTemp_LSTM <- density(balanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Balanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_bal_mcar_50, "blue")
IncDist_LSTM(lstm_bal_mcar_30, "red")
IncDist_LSTM(lstm_bal_mcar_10, "pink")
IncDist_LSTM(lstm_bal_mar_50, "skyblue")
IncDist_LSTM(lstm_bal_mar_30, "violet")
IncDist_LSTM(lstm_bal_mar_10, "yellow")
IncDist_LSTM(lstm_bal_mnar_50, "orange")
IncDist_LSTM(lstm_bal_mnar_30, "green")
IncDist_LSTM(lstm_bal_mnar_10, "brown")
legend("topright",
legend = c("Initial Data",
"bal_mcar_50", "bal_mcar_30", "bal_mcar_10",
"bal_mar_50", "bal_mar_30", "bal_mar_10",
"bal_mnar_50", "bal_mnar_30", "bal_mnar_10"),
col = c("black", "blue", "red", "pink", "skyblue", "violet", "yellow",
"orange", "green", "brown"),
lwd = 2)
# Unbalanced Panel
DataTemp_LSTM <- density(unbalanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Unbalanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_unbal_mcar_50, "coral")
IncDist_LSTM(lstm_unbal_mcar_30, "salmon")
IncDist_LSTM(lstm_unbal_mcar_10, "lavender")
IncDist_LSTM(lstm_unbal_mar_50, "gray")
IncDist_LSTM(lstm_unbal_mar_30, "gold")
IncDist_LSTM(amelia_imp_unbal_mar_10, "orchid")
IncDist_LSTM(lstm_unbal_mnar_50, "navy")
IncDist_LSTM(lstm_unbal_mnar_30, "darkgreen")
IncDist_LSTM(lstm_unbal_mnar_10, "steelblue")
legend("topright",
legend = c("Initial Data",
"unbal_mcar_50", "unbal_mcar_30", "unbal_mcar_10",
"unbal_mar_50", "unbal_mar_30", "unbal_mar_10",
"unbal_mnar_50", "unbal_mnar_30", "unbal_mnar_10"),
col = c("black", "coral", "salmon", "lavender",
"gray", "gold", "orchid", "navy", "darkgreen", "steelblue"),
lwd = 2)
# Plot Distribution
IncDist_LSTM <- function(data, col) {
DataTemp_LSTM <- density(data$Income, na.rm = TRUE)
lines(DataTemp_LSTM, col = col, lwd = 2)
}
# Balanced Panel
DataTemp_LSTM <- density(balanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Balanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_bal_mcar_50, "blue")
IncDist_LSTM(lstm_bal_mcar_30, "red")
IncDist_LSTM(lstm_bal_mcar_10, "pink")
IncDist_LSTM(lstm_bal_mar_50, "skyblue")
IncDist_LSTM(lstm_bal_mar_30, "violet")
IncDist_LSTM(lstm_bal_mar_10, "yellow")
IncDist_LSTM(lstm_bal_mnar_50, "orange")
IncDist_LSTM(lstm_bal_mnar_30, "green")
IncDist_LSTM(lstm_bal_mnar_10, "brown")
legend("topright",
legend = c("Initial Data",
"bal_mcar_50", "bal_mcar_30", "bal_mcar_10",
"bal_mar_50", "bal_mar_30", "bal_mar_10",
"bal_mnar_50", "bal_mnar_30", "bal_mnar_10"),
col = c("black", "blue", "red", "pink", "skyblue", "violet", "yellow",
"orange", "green", "brown"),
lwd = 2)
DataTemp_LSTM <- density(unbalanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Unbalanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_unbal_mcar_50, "coral")
IncDist_LSTM(lstm_unbal_mcar_30, "salmon")
IncDist_LSTM(lstm_unbal_mcar_10, "lavender")
IncDist_LSTM(lstm_unbal_mar_50, "gray")
IncDist_LSTM(lstm_unbal_mar_30, "gold")
IncDist_LSTM(amelia_imp_unbal_mar_10, "orchid")
DataTemp_LSTM <- density(unbalanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Unbalanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_unbal_mcar_50, "coral")
IncDist_LSTM(lstm_unbal_mcar_30, "salmon")
IncDist_LSTM(lstm_unbal_mcar_10, "lavender")
IncDist_LSTM(lstm_unbal_mar_50, "gray")
IncDist_LSTM(lstm_unbal_mar_30, "gold")
IncDist_LSTM(amelia_imp_unbal_mar_10, "orchid")
legend("topright",
legend = c("Initial Data",
"unbal_mcar_50", "unbal_mcar_30", "unbal_mcar_10",
"unbal_mar_50", "unbal_mar_30", "unbal_mar_10",
"unbal_mnar_50", "unbal_mnar_30", "unbal_mnar_10"),
col = c("black", "coral", "salmon", "lavender",
"gray", "gold", "orchid", "navy", "darkgreen", "steelblue"),
lwd = 2)
# Unbalanced Panel
DataTemp_LSTM <- density(unbalanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Unbalanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_unbal_mcar_50, "coral")
IncDist_LSTM(lstm_unbal_mcar_30, "salmon")
IncDist_LSTM(lstm_unbal_mcar_10, "lavender")
IncDist_LSTM(lstm_unbal_mar_50, "gray")
IncDist_LSTM(lstm_unbal_mar_30, "gold")
IncDist_LSTM(amelia_imp_unbal_mar_10, "orchid")
IncDist_LSTM(lstm_unbal_mnar_50, "navy")
IncDist_LSTM(lstm_unbal_mnar_30, "darkgreen")
IncDist_LSTM(lstm_unbal_mnar_10, "steelblue")
legend("topright",
legend = c("Initial Data",
"unbal_mcar_50", "unbal_mcar_30", "unbal_mcar_10",
"unbal_mar_50", "unbal_mar_30", "unbal_mar_10",
"unbal_mnar_50", "unbal_mnar_30", "unbal_mnar_10"),
col = c("black", "coral", "salmon", "lavender",
"gray", "gold", "orchid", "navy", "darkgreen", "steelblue"),
lwd = 2)
# Plot Distribution
IncDist_LSTM <- function(data, col) {
DataTemp_LSTM <- density(data$Income, na.rm = TRUE)
lines(DataTemp_LSTM, col = col, lwd = 2)
}
# Balanced Panel
DataTemp_LSTM <- density(balanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Balanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_bal_mcar_50, "blue")
IncDist_LSTM(lstm_bal_mcar_30, "red")
IncDist_LSTM(lstm_bal_mcar_10, "pink")
IncDist_LSTM(lstm_bal_mar_50, "skyblue")
IncDist_LSTM(lstm_bal_mar_30, "violet")
IncDist_LSTM(lstm_bal_mar_10, "yellow")
IncDist_LSTM(lstm_bal_mnar_50, "orange")
IncDist_LSTM(lstm_bal_mnar_30, "green")
IncDist_LSTM(lstm_bal_mnar_10, "brown")
legend("topright",
legend = c("Initial Data",
"bal_mcar_50", "bal_mcar_30", "bal_mcar_10",
"bal_mar_50", "bal_mar_30", "bal_mar_10",
"bal_mnar_50", "bal_mnar_30", "bal_mnar_10"),
col = c("black", "blue", "red", "pink", "skyblue", "violet", "yellow",
"orange", "green", "brown"),
lwd = 2)
# Unbalanced Panel
DataTemp_LSTM <- density(unbalanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Unbalanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_unbal_mcar_50, "coral")
IncDist_LSTM(lstm_unbal_mcar_30, "salmon")
IncDist_LSTM(lstm_unbal_mcar_10, "lavender")
IncDist_LSTM(lstm_unbal_mar_50, "gray")
IncDist_LSTM(lstm_unbal_mar_30, "gold")
IncDist_LSTM(amelia_imp_unbal_mar_10, "orchid")
IncDist_LSTM(lstm_unbal_mar_10, "orchid")
IncDist_LSTM(lstm_unbal_mnar_50, "navy")
IncDist_LSTM(lstm_unbal_mnar_30, "darkgreen")
IncDist_LSTM(lstm_unbal_mnar_10, "steelblue")
legend("topright",
legend = c("Initial Data",
"unbal_mcar_50", "unbal_mcar_30", "unbal_mcar_10",
"unbal_mar_50", "unbal_mar_30", "unbal_mar_10",
"unbal_mnar_50", "unbal_mnar_30", "unbal_mnar_10"),
col = c("black", "coral", "salmon", "lavender",
"gray", "gold", "orchid", "navy", "darkgreen", "steelblue"),
lwd = 2)
# Function to impute the datasets
Data_Imputation_LSTM <- function(data) {
# Temporarily remove the rows with the missing values
DataTemp <- data %>%
filter(!is.na(Income))
# Convert 'Education' to numeric to make it more compatible with the model and including other numeric columns
DataEncoded <- DataTemp %>%
mutate(Education = as.factor(Education)) %>%
select(Age, Income, Education)
DataEncoded <- as.data.frame(model.matrix(~ Education - 1, data = DataEncoded))
InputData <- cbind(Age = DataTemp$Age, Income = DataTemp$Income, DataEncoded)
CompleteCase <- InputData[!is.na(InputData$Income), ]
TrainArray <- array(as.matrix(CompleteCase), dim = c(nrow(CompleteCase), 1, ncol(CompleteCase)))   # Because 3D array is more suitable for LSTM
# define and compile the LSTM model
model <- keras_model_sequential() %>%
layer_lstm(units = 50, input_shape = c(1, ncol(CompleteCase)), return_sequences = FALSE) %>%
layer_dense(units = 1)
model %>% compile(
loss = "mean_squared_error",
optimizer = optimizer_adam()
)
# Train the model
model %>% fit(
x = TrainArray,
y = CompleteCase$Income,  # Target is the Income column
epochs = 50,
batch_size = 32
)
# Predict and replacing the missing values
MissingCase <- InputData[is.na(data$Income), ]
if (nrow(MissingCase) > 0) {
MissingArray <- array(as.matrix(MissingCase), dim = c(nrow(MissingCase), 1, ncol(MissingCase)))
PredictedValue <- model %>% predict(MissingArray)
data$Income[is.na(data$Income)] <- PredictedValue
}
return(data)
}
# Apply the function to the dataset
lstm_bal_mcar_50 <- Data_Imputation_LSTM(balanced_panel_data_mcar_50)
# Plot Distribution
IncDist_LSTM <- function(data, col) {
DataTemp_LSTM <- density(data$Income, na.rm = TRUE)
lines(DataTemp_LSTM, col = col, lwd = 2)
}
# Balanced Panel
DataTemp_LSTM <- density(balanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Balanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_bal_mcar_50, "blue")
lstm_bal_mcar_30 <- Data_Imputation_LSTM(balanced_panel_data_mcar_30)
lstm_bal_mcar_10 <- Data_Imputation_LSTM(balanced_panel_data_mcar_10)
lstm_bal_mar_50 <- Data_Imputation_LSTM(balanced_panel_data_mar_50)
lstm_bal_mar_30 <- Data_Imputation_LSTM(balanced_panel_data_mar_30)
lstm_bal_mar_10 <- Data_Imputation_LSTM(balanced_panel_data_mar_10)
lstm_bal_mnar_50 <- Data_Imputation_LSTM(balanced_panel_data_mnar_50)
lstm_bal_mnar_30 <- Data_Imputation_LSTM(balanced_panel_data_mnar_30)
lstm_bal_mnar_10 <- Data_Imputation_LSTM(balanced_panel_data_mnar_10)
lstm_unbal_mcar_50 <- Data_Imputation_LSTM(unbalanced_panel_data_mcar_50)
lstm_unbal_mcar_30 <- Data_Imputation_LSTM(unbalanced_panel_data_mcar_30)
lstm_unbal_mcar_10 <- Data_Imputation_LSTM(unbalanced_panel_data_mcar_10)
lstm_unbal_mar_50 <- Data_Imputation_LSTM(unbalanced_panel_data_mar_50)
lstm_unbal_mar_30 <- Data_Imputation_LSTM(unbalanced_panel_data_mar_30)
lstm_unbal_mar_10 <- Data_Imputation_LSTM(unbalanced_panel_data_mar_10)
lstm_unbal_mnar_50 <- Data_Imputation_LSTM(unbalanced_panel_data_mnar_50)
lstm_unbal_mnar_30 <- Data_Imputation_LSTM(unbalanced_panel_data_mnar_30)
lstm_unbal_mnar_10 <- Data_Imputation_LSTM(unbalanced_panel_data_mnar_10)
# Plot Distribution
IncDist_LSTM <- function(data, col) {
DataTemp_LSTM <- density(data$Income, na.rm = TRUE)
lines(DataTemp_LSTM, col = col, lwd = 2)
}
# Balanced Panel
DataTemp_LSTM <- density(balanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Balanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_bal_mcar_50, "blue")
IncDist_LSTM(lstm_bal_mcar_30, "red")
IncDist_LSTM(lstm_bal_mcar_10, "pink")
IncDist_LSTM(lstm_bal_mar_50, "skyblue")
IncDist_LSTM(lstm_bal_mar_30, "violet")
IncDist_LSTM(lstm_bal_mar_10, "yellow")
IncDist_LSTM(lstm_bal_mnar_50, "orange")
IncDist_LSTM(lstm_bal_mnar_30, "green")
IncDist_LSTM(lstm_bal_mnar_10, "brown")
legend("topright",
legend = c("Initial Data",
"bal_mcar_50", "bal_mcar_30", "bal_mcar_10",
"bal_mar_50", "bal_mar_30", "bal_mar_10",
"bal_mnar_50", "bal_mnar_30", "bal_mnar_10"),
col = c("black", "blue", "red", "pink", "skyblue", "violet", "yellow",
"orange", "green", "brown"),
lwd = 2)
# Unbalanced Panel
DataTemp_LSTM <- density(unbalanced_panel_data$Income, na.rm = TRUE)
plot(DataTemp_LSTM,
main = "Income Distributions from LSTM - Unbalanced Panel",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_LSTM(lstm_unbal_mcar_50, "coral")
IncDist_LSTM(lstm_unbal_mcar_30, "salmon")
IncDist_LSTM(lstm_unbal_mcar_10, "lavender")
IncDist_LSTM(lstm_unbal_mar_50, "gray")
IncDist_LSTM(lstm_unbal_mar_30, "gold")
IncDist_LSTM(lstm_unbal_mar_10, "orchid")
IncDist_LSTM(lstm_unbal_mnar_50, "navy")
IncDist_LSTM(lstm_unbal_mnar_30, "darkgreen")
IncDist_LSTM(lstm_unbal_mnar_10, "steelblue")
legend("topright",
legend = c("Initial Data",
"unbal_mcar_50", "unbal_mcar_30", "unbal_mcar_10",
"unbal_mar_50", "unbal_mar_30", "unbal_mar_10",
"unbal_mnar_50", "unbal_mnar_30", "unbal_mnar_10"),
col = c("black", "coral", "salmon", "lavender",
"gray", "gold", "orchid", "navy", "darkgreen", "steelblue"),
lwd = 2)
