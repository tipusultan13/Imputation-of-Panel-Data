FUN = function(x) length(unique(x)))
# Check if every ID appears in all the years (2013 to 2023)
is_balanced_panel <- all(id_year_count$Year == length(2013:2023))
if (is_balanced_panel) {
print("The data is a balanced panel.")
} else {
print("The data is not a balanced panel.")
}
# Optionally, print the IDs that do not appear in all years
unbalanced_ids <- id_year_count$ID[id_year_count$Year != length(2013:2023)]
if (length(unbalanced_ids) > 0) {
print("IDs that do not appear in all years:")
print(unbalanced_ids)
}
# Check for duplicate rows in the data
print(unbalanced_panel_data[duplicated(unbalanced_panel_data), ])
# Display the count of observations per year and summary statistics
count(unbalanced_panel_data, Year)
summary(unbalanced_panel_data)
########################
## Missingness in Balanced Panel
########################
library(VIM)
#### MCAR ####
##############
#### 50% ####
p_mis_50 <- 0.50
num_rows <- nrow(balanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_50 <- sample(1:num_rows, p_mis_50 * num_rows, replace = FALSE)
balanced_panel_data_mcar_50 <- balanced_panel_data
balanced_panel_data_mcar_50[mis_simulated_mcar_50, 5] <- NA
summary(balanced_panel_data_mcar_50)
# Visualize the missing data pattern using the VIM package
aggr(balanced_panel_data_mcar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mcar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- 0.30
num_rows <- nrow(balanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_30 <- sample(1:num_rows, p_mis_30 * num_rows, replace = FALSE)
balanced_panel_data_mcar_30 <- balanced_panel_data
balanced_panel_data_mcar_30[mis_simulated_mcar_30, 5] <- NA
summary(balanced_panel_data_mcar_30)
# Visualize the missing data pattern
aggr(balanced_panel_data_mcar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mcar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_10 <- 0.10
num_rows <- nrow(balanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_10 <- sample(1:num_rows, p_mis_10 * num_rows, replace = FALSE)
balanced_panel_data_mcar_10 <- balanced_panel_data
balanced_panel_data_mcar_10[mis_simulated_mcar_10, 5] <- NA
summary(balanced_panel_data_mcar_10)
# Visualize the missing data pattern
aggr(balanced_panel_data_mcar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mcar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MAR ####
#############
#### 50% ####
balanced_panel_data_mar_50 <- balanced_panel_data
set.seed(123)
p_mis_50 <- 0.5  # 50% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_50 <- 0.5 + 0.1 * balanced_panel_data_mar_50$Education +
0.2 * balanced_panel_data_mar_50$Age +
rnorm(nrow(balanced_panel_data_mar_50), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_50 <- mis_simulated_mar_50 < quantile(mis_simulated_mar_50, p_mis_50)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_50))
# Set values to NA in IndividualIncome where missingness occurs
balanced_panel_data_mar_50$IndividualIncome[mis_simulated_mar_50] <- NA
# Summary of IndividualIncome after introducing missingness
summary(balanced_panel_data_mar_50)
# Visualize the missing data pattern
aggr(balanced_panel_data_mar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
balanced_panel_data_mar_30 <- balanced_panel_data
set.seed(123)
p_mis_50 <- 0.3  # 30% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_30 <- 0.7 + 0.1 * balanced_panel_data_mar_30$Education +
0.2 * balanced_panel_data_mar_30$Age +
rnorm(nrow(balanced_panel_data_mar_30), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_30 <- mis_simulated_mar_30 < quantile(mis_simulated_mar_30, p_mis_30)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_30))
# Set values to NA in IndividualIncome where missingness occurs
balanced_panel_data_mar_30$IndividualIncome[mis_simulated_mar_30] <- NA
# Summary of IndividualIncome after introducing missingness
summary(balanced_panel_data_mar_30)
# Visualize the missing data pattern
aggr(balanced_panel_data_mar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
balanced_panel_data_mar_10 <- balanced_panel_data
set.seed(123)
p_mis_50 <- 0.1  # 10% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_10 <- 0.1 + 0.1 * balanced_panel_data_mar_10$Education +
0.2 * balanced_panel_data_mar_10$Age +
rnorm(nrow(balanced_panel_data_mar_10), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_10 <- mis_simulated_mar_10 < quantile(mis_simulated_mar_10, p_mis_10)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_10))
# Set values to NA in IndividualIncome where missingness occurs
balanced_panel_data_mar_10$IndividualIncome[mis_simulated_mar_10] <- NA
# Summary of IndividualIncome after introducing missingness
summary(balanced_panel_data_mar_10)
# Visualize the missing data pattern
aggr(balanced_panel_data_mar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MNAR ####
##############
#### Probabilistic, Linear Regression model ####
#### 50% ####
p_mis_50 <- .50
balanced_panel_data_mnar_50 <- balanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_50 <- 0.5 + .2 * balanced_panel_data_mnar_50$Education +
0.1 * balanced_panel_data_mnar_50$Age +
0.5 * balanced_panel_data_mnar_50$IndividualIncome + rnorm(nrow(balanced_panel_data), 0, 3)
mis_simulated_mnar_50 <- mis_simulated_mnar_50 < quantile(mis_simulated_mnar_50, p_mis_50)
balanced_panel_data_mnar_50$IndividualIncome[mis_simulated_mnar_50] <- NA
summary(balanced_panel_data_mnar_50)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- .30
balanced_panel_data_mnar_30 <- balanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_30 <- 0.7 + 0.1 * balanced_panel_data_mnar_30$Education +
0.2 * balanced_panel_data_mnar_30$Age +
0.5 * balanced_panel_data_mnar_30$IndividualIncome + rnorm(nrow(balanced_panel_data), 0, 3)
mis_simulated_mnar_30 <- mis_simulated_mnar_30 < quantile(mis_simulated_mnar_30, p_mis_30)
balanced_panel_data_mnar_30$IndividualIncome[mis_simulated_mnar_30] <- NA
summary(balanced_panel_data_mnar_30)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- .10
balanced_panel_data_mnar_10 <- balanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_10 <- 0.1 + 0.1 * balanced_panel_data_mnar_10$Education +
0.2 * balanced_panel_data_mnar_10$Age +
0.5 * balanced_panel_data_mnar_10$IndividualIncome + rnorm(nrow(balanced_panel_data), 0, 3)
mis_simulated_mnar_10 <- mis_simulated_mnar_10 < quantile(mis_simulated_mnar_10, p_mis_10)
balanced_panel_data_mnar_10$IndividualIncome[mis_simulated_mnar_10] <- NA
summary(balanced_panel_data_mnar_10)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
########################
## Missingness in Unalanced Panel
########################
#### MCAR ####
##############
#### 50% ####
p_mis_50 <- 0.50
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_50 <- sample(1:num_rows, p_mis_50 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_50 <- unbalanced_panel_data
unbalanced_panel_data_mcar_50[mis_simulated_mcar_50, 5] <- NA
summary(unbalanced_panel_data_mcar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- 0.30
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_30 <- sample(1:num_rows, p_mis_30 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_30 <- unbalanced_panel_data
unbalanced_panel_data_mcar_30[mis_simulated_mcar_30, 5] <- NA
summary(unbalanced_panel_data_mcar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- 0.10
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_10 <- sample(1:num_rows, p_mis_10 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_10 <- unbalanced_panel_data
unbalanced_panel_data_mcar_10[mis_simulated_mcar_10, 5] <- NA
summary(unbalanced_panel_data_mcar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MAR ####
#############
#### 50% ####
unbalanced_panel_data_mar_50 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.5  # 50% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_50 <- 0.5 + 0.1 * unbalanced_panel_data_mar_50$Education +
0.2 * unbalanced_panel_data_mar_50$Age +
rnorm(nrow(unbalanced_panel_data_mar_50), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_50 <- mis_simulated_mar_50 < quantile(mis_simulated_mar_50, p_mis_50)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_50))
# Set values to NA in IndividualIncome where missingness occurs
unbalanced_panel_data_mar_50$IndividualIncome[mis_simulated_mar_50] <- NA
# Summary of IndividualIncome after introducing missingness
summary(unbalanced_panel_data_mar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
unbalanced_panel_data_mar_30 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.3  # 30% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_30 <- 0.7 + 0.1 * unbalanced_panel_data_mar_30$Education +
0.2 * unbalanced_panel_data_mar_30$Age +
rnorm(nrow(unbalanced_panel_data_mar_30), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_30 <- mis_simulated_mar_30 < quantile(mis_simulated_mar_30, p_mis_30)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_30))
# Set values to NA in IndividualIncome where missingness occurs
unbalanced_panel_data_mar_30$IndividualIncome[mis_simulated_mar_30] <- NA
# Summary of IndividualIncome after introducing missingness
summary(unbalanced_panel_data_mar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
unbalanced_panel_data_mar_10 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.1  # 10% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_10 <- 0.1 + 0.1 * unbalanced_panel_data_mar_10$Education +
0.2 * unbalanced_panel_data_mar_10$Age +
rnorm(nrow(unbalanced_panel_data_mar_10), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_10 <- mis_simulated_mar_10 < quantile(mis_simulated_mar_10, p_mis_10)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_10))
# Set values to NA in IndividualIncome where missingness occurs
unbalanced_panel_data_mar_10$IndividualIncome[mis_simulated_mar_10] <- NA
# Summary of IndividualIncome after introducing missingness
summary(unbalanced_panel_data_mar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MNAR ####
##############
#### 50% ####
#### Probabilistic, Linear Regression model, Real data ####
p_mis_50 <- .50
unbalanced_panel_data_mnar_50 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_50 <- 0.5 + 0.1 * unbalanced_panel_data_mnar_50$Education +
0.2 * unbalanced_panel_data_mnar_50$Age +
0.5 * unbalanced_panel_data_mnar_50$IndividualIncome + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_50 <- mis_simulated_mnar_50 < quantile(mis_simulated_mnar_50, p_mis_50)
unbalanced_panel_data_mnar_50$IndividualIncome[mis_simulated_mnar_50] <- NA
summary(unbalanced_panel_data_mnar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- .30
unbalanced_panel_data_mnar_30 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_30 <-0.7 + 0.1 * unbalanced_panel_data_mnar_30$Education +
0.2 * unbalanced_panel_data_mnar_30$Age +
0.5 * unbalanced_panel_data_mnar_30$IndividualIncome + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_30 <- mis_simulated_mnar_30 < quantile(mis_simulated_mnar_30, p_mis_30)
unbalanced_panel_data_mnar_30$IndividualIncome[mis_simulated_mnar_30] <- NA
summary(unbalanced_panel_data_mnar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- .10
unbalanced_panel_data_mnar_10 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_10 <- 0.1 + 0.1 * unbalanced_panel_data_mnar_10$Education +
0.2 * unbalanced_panel_data_mnar_10$Age +
0.5 * unbalanced_panel_data_mnar_10$IndividualIncome + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_10 <- mis_simulated_mnar_10 < quantile(mis_simulated_mnar_10, p_mis_10)
unbalanced_panel_data_mnar_10$IndividualIncome[mis_simulated_mnar_10] <- NA
summary(unbalanced_panel_data_mnar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
###################
### Data Sets Overview and Formating
###################
## Format Vriable to Their Originl Format
convert_to_factors <- function(df) {
df$ID <- as.factor(df$ID)
df$Year <- as.factor(df$Year)
df$Education <- as.factor(df$Education)
return(df)
}
# Apply the function to each dataset
balanced_panel_data_mcar_50 <- convert_to_factors(balanced_panel_data_mcar_50)
balanced_panel_data_mcar_30 <- convert_to_factors(balanced_panel_data_mcar_30)
balanced_panel_data_mcar_10 <- convert_to_factors(balanced_panel_data_mcar_10)
balanced_panel_data_mar_50 <- convert_to_factors(balanced_panel_data_mar_50)
balanced_panel_data_mar_30 <- convert_to_factors(balanced_panel_data_mar_30)
balanced_panel_data_mar_10 <- convert_to_factors(balanced_panel_data_mar_10)
balanced_panel_data_mnar_50 <- convert_to_factors(balanced_panel_data_mnar_50)
balanced_panel_data_mnar_30 <- convert_to_factors(balanced_panel_data_mnar_30)
balanced_panel_data_mnar_10 <- convert_to_factors(balanced_panel_data_mnar_10)
unbalanced_panel_data_mcar_50 <- convert_to_factors(unbalanced_panel_data_mcar_50)
unbalanced_panel_data_mcar_30 <- convert_to_factors(unbalanced_panel_data_mcar_30)
unbalanced_panel_data_mcar_10 <- convert_to_factors(unbalanced_panel_data_mcar_10)
unbalanced_panel_data_mar_50 <- convert_to_factors(unbalanced_panel_data_mar_50)
unbalanced_panel_data_mar_30 <- convert_to_factors(unbalanced_panel_data_mar_30)
unbalanced_panel_data_mar_10 <- convert_to_factors(unbalanced_panel_data_mar_10)
unbalanced_panel_data_mnar_50 <- convert_to_factors(unbalanced_panel_data_mnar_50)
unbalanced_panel_data_mnar_30 <- convert_to_factors(unbalanced_panel_data_mnar_30)
unbalanced_panel_data_mnar_10 <- convert_to_factors(unbalanced_panel_data_mnar_10)
# Load necessary libraries
library(keras)
install.packages("keras")
# Load necessary libraries
library(keras)
library(dplyr)
library(tidyr)
library(caret)
install.packages("caret")
install.packages("imputeTS")
library(caret)
library(imputeTS)  # For handling missing data
Use your dataset
# Use your dataset
data <- balanced_panel_data_mcar_50
# 1. One-hot encode the Education variable
data <- data %>%
mutate(Education = as.factor(Education)) %>%
model.matrix(~ Education - 1, data = .) %>%
as.data.frame() %>%
bind_cols(select(data, -Education))
# 2. Normalize numerical columns (Age, IndividualIncome)
preProc <- preProcess(data[, c("Age", "IndividualIncome")], method = c("center", "scale"))
data[, c("Age", "IndividualIncome")] <- predict(preProc, data[, c("Age", "IndividualIncome")])
# 3. Handle missing data (LSTM requires no missing values during training)
# Use a simple method like interpolation to temporarily fill missing values in IndividualIncome
data$IndividualIncome <- na_interpolation(data$IndividualIncome)
# 4. Reshape the data into sequences per ID (group by ID and year)
data <- data %>% arrange(ID, Year)
# Create sequences for LSTM
create_sequences <- function(data, seq_length = 5) {
X <- list()
y <- list()
ids <- unique(data$ID)
for (i in ids) {
id_data <- data %>% filter(ID == i)
if (nrow(id_data) >= seq_length) {
for (j in seq(seq_length, nrow(id_data))) {
X[[length(X) + 1]] <- as.matrix(id_data[(j-seq_length+1):j, c("Age", starts_with("Education"))])
y[[length(y) + 1]] <- id_data$IndividualIncome[j]
}
}
}
X <- array_reshape(do.call(rbind, X), c(length(X), seq_length, ncol(X[[1]])))
y <- do.call(c, y)
return(list(X = X, y = y))
}
sequences <- create_sequences(data, seq_length = 5)
# Use your dataset
data <- balanced_panel_data_mcar_50
# 1. One-hot encode the Education variable
data <- data %>%
mutate(Education = as.factor(Education)) %>%
model.matrix(~ Education - 1, data = .) %>%
as.data.frame() %>%
bind_cols(select(data, -Education))
# 2. Normalize numerical columns (Age, IndividualIncome)
preProc <- preProcess(data[, c("Age", "IndividualIncome")], method = c("center", "scale"))
data[, c("Age", "IndividualIncome")] <- predict(preProc, data[, c("Age", "IndividualIncome")])
# 3. Handle missing data (LSTM requires no missing values during training)
# Use a simple method like interpolation to temporarily fill missing values in IndividualIncome
data$IndividualIncome <- na_interpolation(data$IndividualIncome)
# 4. Reshape the data into sequences per ID (group by ID and year)
data <- data %>% arrange(ID, Year)
# Create sequences for LSTM
create_sequences <- function(data, seq_length = 5) {
X <- list()
y <- list()
ids <- unique(data$ID)
for (i in ids) {
id_data <- data %>% filter(ID == i)
if (nrow(id_data) >= seq_length) {
for (j in seq(seq_length, nrow(id_data))) {
X[[length(X) + 1]] <- as.matrix(id_data[(j-seq_length+1):j, c("Age", starts_with("Education"))])
y[[length(y) + 1]] <- id_data$IndividualIncome[j]
}
}
}
X <- array_reshape(do.call(rbind, X), c(length(X), seq_length, ncol(X[[1]])))
y <- do.call(c, y)
return(list(X = X, y = y))
}
sequences <- create_sequences(data, seq_length = 5)
