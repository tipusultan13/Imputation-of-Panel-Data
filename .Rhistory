bestCity.pca <- bestCity[,2:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
bestCity.pca.eigen <- eigen(cov(bestCity.pca))
food <- read.csv("https://userpage.fu-berlin.de/soga/300/30100_data_sets/food-texture.csv")
# load helper functions from previous sections
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
library(dplyr)
# center and scale data set
# useage of the pipe operator %>% provided by the dplyr package
food.pca <- food[,2:ncol(food)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
dim(food.pca)
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
dim(bestCity.pca)
# load helper functions from previous sections
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
knitr::opts_chunk$set(echo = TRUE)
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
library(dplyr)
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
load("bestCity.Rda")
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
dim(bestCity.pca)
## Find the top 10 countries on the basis of the highest coronavirus cases.
library(tidyr)
covid_data_cleaned<-read.csv("covid_data_cleaned.csv")
covid_data_omited <- covid_data[!(is.na(covid_data$continent) | covid_data$continent==""), ]
covid_data<-covid_data_cleaned[,c("location","new_cases","continent")]
covid_data_omited <- covid_data[!(is.na(covid_data$continent) | covid_data$continent==""), ]
covid_data_aggregated <- aggregate(new_cases~location+continent, covid_data_omited, sum)
covid_data_ordered <- covid_data_aggregated[order(covid_data_aggregated$new_cases,decreasing = TRUE),]
covid_data_top_10 <- covid_data_ordered[1:10,]
covid_data_top_10
## Find the stacked area chart
library(ggplot2)
covid_data_top_10
## Find the stacked area chart
library(ggplot2)
continent<-covid_data_top_10$continent
location<-covid_data_top_10$location
location<-as.numeric(factor(location))
new_cases<-covid_data_top_10$new_cases
data_new<- data.frame(location,new_cases,continent)
plot<-ggplot(data = data_new,
aes(x=location,
y=new_cases,
fill=continent,
))
stack_area_chart<-plot+geom_area(aes(color=continent,fill=continent))
stack_area_chart
load("bestCity.Rda")
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCitr.c.cov <- scale(bestCity, center=TRUE, scale=FALSE) # centering of the columns
apply(bestCitr.c.cov, 2 ,var) # variance are significantly different
bestCity.c.corr <- scale(bestCity, center=TRUE, scale=TRUE) # centering of the columns
apply(bestCity.c.corr, 2 ,var) # variance are well standardized.
biplot(pca.cov)
biplot(pca.cor)
library(dplyr)
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
dim(bestCity.pca)
bestCity.pca.eigen <- eigen(cov(bestCity.pca))
bestCity.pca.eigen$values
bestCity.pca.eigen$values
cumsum(bestCity.pca.eigen$values/sum(bestCity.pca.eigen$values))
bestCity.pca.eigen$values[bestCity.pca.eigen$values >=1]
bestCity.pca.ve <- bestCity.pca.eigen$values/sum(bestCity.pca.eigen$values)
par(mfrow = c(1,2), mar = c(4,5,3,1))
plot(bestCity.pca.ve,
xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0,1),
type = 'b',
main = 'Scree plot')
plot(cumsum(bestCity.pca.ve),
xlab = "Principal Component",
ylab = "Cumulative Proportion of\nVariance Explained",
ylim = c(0,1),
type = 'b',
main = 'Scree plot')
knitr::opts_chunk$set(echo = TRUE)
## Find the top 10 countries on the basis of the highest coronavirus cases.
library(tidyr)
covid_data_cleaned<-read.csv("covid_data_cleaned.csv")
covid_data<-covid_data_cleaned[,c("location","new_cases","continent")]
covid_data_omited <- covid_data[!(is.na(covid_data$continent) | covid_data$continent==""), ]
covid_data_aggregated <- aggregate(new_cases~location+continent, covid_data_omited, sum)
covid_data_ordered <- covid_data_aggregated[order(covid_data_aggregated$new_cases,decreasing = TRUE),]
covid_data_top_10 <- covid_data_ordered[1:10,]
covid_data_top_10
## Find the stacked area chart
library(ggplot2)
continent<-covid_data_top_10$continent
location<-covid_data_top_10$location
location<-as.numeric(factor(location))
new_cases<-covid_data_top_10$new_cases
data_new<- data.frame(location,new_cases,continent)
plot<-ggplot(data = data_new,
aes(x=location,
y=new_cases,
fill=continent,
))
stack_area_chart<-plot+geom_area(aes(color=continent,fill=continent))
stack_area_chart
load("bestCity.Rda")
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCitr.c.cov <- scale(bestCity, center=TRUE, scale=FALSE) # centering of the columns
apply(bestCitr.c.cov, 2 ,var) # variance are significantly different
bestCitr.c.cov <- scale(bestCity, center=TRUE, scale=FALSE) # centering of the columns
apply(bestCitr.c.cov, 2 ,var) # variance are significantly different
bestCity.c.corr <- scale(bestCity, center=TRUE, scale=TRUE) # centering of the columns
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
bestCitr.c.cov <- scale(bestCity, center=TRUE, scale=FALSE) # centering of the columns
bestCity.c.cov <- scale(bestCity, center=TRUE, scale=FALSE) # centering of the columns
apply(bestCitr.c.cov, 2 ,var) # variance are significantly different
load("bestCity.Rda")
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
library(dplyr)
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCity.c.cov <- scale(bestCity, center=TRUE, scale=FALSE) # centering of the columns
apply(bestCitr.c.cov, 2 ,var) # variance are significantly different
biplot(pca.cov)
knitr::opts_chunk$set(echo = TRUE)
load("bestCity.Rda")library(dplyr)
load("bestCity.Rda")
library(dplyr)
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCitr.c.cov <- scale(bestCity, center=TRUE, scale=FALSE) # centering of the columns
bestCity.c.cov <- scale(bestCity, center=TRUE, scale=FALSE) # centering of the columns
apply(bestCity.c.cov, 2 ,var) # variance are significantly different
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
dim(bestCity.pca)
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
apply(bestCity.c.cov, 2 ,var) # variance are significantly different
knitr::opts_chunk$set(echo = TRUE)
## Find the top 10 countries on the basis of the highest coronavirus cases.
library(tidyr)
covid_data_cleaned<-read.csv("covid_data_cleaned.csv")
covid_data<-covid_data_cleaned[,c("location","new_cases","continent")]
covid_data_omited <- covid_data[!(is.na(covid_data$continent) | covid_data$continent==""), ]
covid_data_aggregated <- aggregate(new_cases~location+continent, covid_data_omited, sum)
covid_data_ordered <- covid_data_aggregated[order(covid_data_aggregated$new_cases,decreasing = TRUE),]
covid_data_top_10 <- covid_data_ordered[1:10,]
covid_data_top_10
## Find the stacked area chart
library(ggplot2)
continent<-covid_data_top_10$continent
location<-covid_data_top_10$location
location<-as.numeric(factor(location))
new_cases<-covid_data_top_10$new_cases
data_new<- data.frame(location,new_cases,continent)
plot<-ggplot(data = data_new,
aes(x=location,
y=new_cases,
fill=continent,
))
stack_area_chart<-plot+geom_area(aes(color=continent,fill=continent))
stack_area_chart
load("bestCity.Rda")
library(dplyr)
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
apply(bestCity.c.cov, 2 ,var) # variance are significantly different
bestCity.c.cor <- scale(bestCity, center=TRUE, scale=TRUE) # centering of the columns
apply(bestCity.c.cor, 2 ,var) # variance are well standardized.
biplot(pca.cov)
biplot(pca.cor)
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
dim(bestCity.pca)
bestCity.pca.eigen <- eigen(cov(bestCity.pca))
bestCity.pca.eigen$values
cumsum(bestCity.pca.eigen$values/sum(bestCity.pca.eigen$values))
bestCity.pca.eigen$values[bestCity.pca.eigen$values >=1]
bestCity.pca.ve <- bestCity.pca.eigen$values/sum(bestCity.pca.eigen$values)
par(mfrow = c(1,2), mar = c(4,5,3,1))
plot(bestCity.pca.ve,
xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0,1),
type = 'b',
main = 'Scree plot')
plot(cumsum(bestCity.pca.ve),
xlab = "Principal Component",
ylab = "Cumulative Proportion of\nVariance Explained",
ylim = c(0,1),
type = 'b',
main = 'Scree plot')
load("UKZ.Rda")
View(UKZ)
pairs(UKZ)
?prcomp
prcomp(UKZ,center=TRUE,scale=FALSE,retx=FALSE)      # scale = FALSE for Covariance-PCA
pca.cov <- prcomp(UKZ)
summary(pca.cov)
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
?svd
UKZ.c.svd <- svd(UKZ.c, nu = nrow(UKZ.c), nv = ncol(UKZ.c)) # singular value decomposition
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
?prcomp
prcomp(UKZ,center=TRUE,scale=FALSE,retx=FALSE)      # scale = FALSE for Covariance-PCA
pca.cov <- prcomp(UKZ)
summary(pca.cov)
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
?svd
UKZ.c.svd <- svd(UKZ.c, nu = nrow(UKZ.c), nv = ncol(UKZ.c)) # singular value decomposition
UKZ.c.svd$d
dim(UKZ.c.svd$d)
pairs(UKZ)
?prcomp
prcomp(UKZ,center=TRUE,scale=FALSE,retx=FALSE)      # scale = FALSE for Covariance-PCA
pca.cov <- prcomp(UKZ)
summary(pca.cov)
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
dim(UKZ.c.svd$u)
length(UKZ.c.svd$d)
dim(UKZ.c.svd$v)
UKZ.c.svd.dMatrix <- matrix(0, nrow=100, ncol=7)
UKZ.c.svd.dMatrix[1:7,] <- diag(UKZ.c.svd$d)
knitr::opts_chunk$set(echo = TRUE)
load("bestCity.Rda")
library(dplyr)
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
load("UKZ.Rda")
View(UKZ)
pairs(UKZ)
?prcomp
prcomp(UKZ,center=TRUE,scale=FALSE,retx=FALSE)      # scale = FALSE for Covariance-PCA
pca.cov <- prcomp(UKZ)
summary(pca.cov)
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
?scale
load("UKZ.Rda")
View(UKZ)
pairs(UKZ)
?prcomp
prcomp(UKZ,center=TRUE,scale=FALSE,retx=FALSE)      # scale = FALSE for Covariance-PCA
pca.cov <- prcomp(UKZ)
summary(pca.cov)
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
load("UKZ.Rda")
View(UKZ)
pairs(UKZ)
?prcomp
prcomp(UKZ,center=TRUE,scale=FALSE,retx=FALSE)      # scale = FALSE for Covariance-PCA
pca.cov <- prcomp(UKZ)
summary(pca.cov)
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
knitr::opts_chunk$set(echo = TRUE)
## Find the top 10 countries on the basis of the highest coronavirus cases.
library(tidyr)
covid_data_cleaned<-read.csv("covid_data_cleaned.csv")
covid_data<-covid_data_cleaned[,c("location","new_cases","continent")]
covid_data_omited <- covid_data[!(is.na(covid_data$continent) | covid_data$continent==""), ]
covid_data_aggregated <- aggregate(new_cases~location+continent, covid_data_omited, sum)
covid_data_ordered <- covid_data_aggregated[order(covid_data_aggregated$new_cases,decreasing = TRUE),]
covid_data_top_10 <- covid_data_ordered[1:10,]
covid_data_top_10
## Find the stacked area chart
library(ggplot2)
continent<-covid_data_top_10$continent
location<-covid_data_top_10$location
location<-as.numeric(factor(location))
new_cases<-covid_data_top_10$new_cases
data_new<- data.frame(location,new_cases,continent)
plot<-ggplot(data = data_new,
aes(x=location,
y=new_cases,
fill=continent,
))
stack_area_chart<-plot+geom_area(aes(color=continent,fill=continent))
stack_area_chart
load("bestCity.Rda")
library(dplyr)
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
apply(bestCity.c.cov, 2 ,var) # variance are significantly different
load("UKZ.Rda")
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
knitr::opts_chunk$set(echo = TRUE)
load("bestCity.Rda")
library(dplyr)
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
dim(bestCity.pca)
load("UKZ.Rda")
View(UKZ)
pairs(UKZ)
?prcomp
prcomp(UKZ,center=TRUE,scale=FALSE,retx=FALSE)      # scale = FALSE for Covariance-PCA
pca.cov <- prcomp(UKZ)
summary(pca.cov)
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
UKZ.c <- scale(UKZ, center=TRUE, scale=FALSE) # centering of the columns
## Exercise 2.1 a)
gerwd()
## Exercise 2.1 a)
getwd()
knitr::opts_chunk$set(echo = TRUE)
load("bestCity.Rda")
library(dplyr)
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
apply(bestCity.c.cov, 2 ,var) # variance are significantly different
knitr::opts_chunk$set(echo = TRUE)
load("bestCity.Rda")
library(dplyr)
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
apply(bestCity.c.cov, 2 ,var) # variance are significantly different
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
getwd()
setwd("/Users/tipusultan")
load("bestCity.Rda")
getwd()
knitr::opts_chunk$set(echo = TRUE)
load("bestCity.Rda")
library(dplyr)
rownames(bestCity) <- bestCity$X
bestCity<-bestCity[,2:13]
prcomp(bestCity,center=TRUE,scale=FALSE,retx=FALSE)      ## scale = FALSE for Covariance-PCA
pca.cov <- prcomp(bestCity)
pca.cov
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
prcomp(bestCity, retx=FALSE, center=TRUE, scale=TRUE)  ## scale = TRUE for Correlation-PCA
pca.cor <- prcomp(bestCity)
pca.cor
bestCity.c.cov <- scale(bestCity, center=TRUE, scale = FALSE) # centering of the columns
apply(bestCity.c.cov, 2 ,var) # variance are significantly different
bestCity.c.cor <- scale(bestCity, center=TRUE, scale=TRUE) # centering of the columns
apply(bestCity.c.cor, 2 ,var) # variance are well standardized.
biplot(pca.cov)
biplot(pca.cov)
biplot(pca.cor)
# load helper functions.
load(url("https://userpage.fu-berlin.de/soga/300/30100_data_sets/helper_functions_30300.RData"))
bestCity.pca <- bestCity[,1:ncol(bestCity)] %>%
apply(MARGIN = 2, FUN = center) %>%
apply(MARGIN = 2, FUN = scale)
dim(bestCity.pca)
bestCity.pca.eigen <- eigen(cov(bestCity.pca))
bestCity.pca.eigen$values
cumsum(bestCity.pca.eigen$values/sum(bestCity.pca.eigen$values))
a<-c(1,2,3,4)
x*3
y=x*3
fahrenheit_to_celsius <- function(temp_F) {
temp_C <- (temp_F - 32) * 5 / 9
return(temp_C)
}
mul_by_3 <- function(x) {
y=x*3
}
mul_by_3 <- function(x) {
y=x*3
}
mul_by_3(2)
mul_by_3 <- function(x) {
y=x*3
return(y)
}
mul_by_3(2)
a
a = 5
a
getwd()
sink()
a = 5
getwd()
exit(sink())
a
a
for i in range(1:6){
i**2
}
exit(sink())
1:50%in%c(3,10,7)
length(1:50%in%c(3,10,7))
abc -> list(1,2,3,4,5,6,7,8,9)
abc = list(1,2,3,4,5,6,7,8,9)
abc[[c(3,4)]]
abc = list(1,2,3,4,5,6,7,8,9)
abc[[c(3,4)]]
abc
as.numeric(factor(c(3,1,4,1,5)))
is.list(abc[1])
?sample
12*4*10
12*4*10000
getwd()
x = c(1,2,3)
plot(x)
getwd()
setwd("/Users/tipusultan/Documents/GitHub/Imputation-of-Panel-Data")
getwd()
# Load Data
LifeExpectancy -> read.excel('life expectancy')
# Load Data
LifeExpectancy <- read.excel('life expectancy')
library("readxl", lib.loc="/opt/anaconda3/envs/rstudio/lib/R/library")
# Load Data
LifeExpectancy <- read.excel('life expectancy')
# Load Data
LifeExpectancy <- read_excel('life expectancy')
# Load Data
LifeExpectancy <- read_excel('life expectancy.xlsx')
View(LifeExpectancy)
