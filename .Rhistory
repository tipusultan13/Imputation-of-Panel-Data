stringsAsFactors = FALSE
)
combined_unbal_df <- data.frame(
Name = character(),
EmploymentTypes = numeric(),
Age = numeric(),
MaritalStatus = numeric(),
EmploymentHours = numeric(),
stringsAsFactors = FALSE
)
# Loop through each dataframe, extract coefficients, and add to the appropriate combined dataframe
for (name in dataframe_names) {
# Retrieve the dataframe by name
df <- get(name)
# Extract coefficients for each variable
EmploymentTypes <- if("EmploymentTypes" %in% rownames(df)) df["EmploymentTypes", "Coefficient"] else NA
Age <- if("Age" %in% rownames(df)) df["Age", "Coefficient"] else NA
MaritalStatus <- if("MaritalStatus" %in% rownames(df)) df["MaritalStatus", "Coefficient"] else NA
EmploymentHours <- if("EmploymentHours" %in% rownames(df)) df["EmploymentHours", "Coefficient"] else NA
# Add a new row to the appropriate combined dataframe based on name pattern
if (grepl("bal", name)) {
combined_bal_df <- rbind(
combined_bal_df,
data.frame(
Name = name,
EmploymentTypes = EmploymentTypes,
Age = Age,
MaritalStatus = MaritalStatus,
EmploymentHours = EmploymentHours
)
)
} else if (grepl("unbal", name)) {
combined_unbal_df <- rbind(
combined_unbal_df,
data.frame(
Name = name,
EmploymentTypes = EmploymentTypes,
Age = Age,
MaritalStatus = MaritalStatus,
EmploymentHours = EmploymentHours
)
)
}
}
View(combined_bal_df)
View(combined_bal_df)
View(combined_unbal_df)
# List of all dataframe names
dataframe_names <- c(
"Coeff_mice_bal_mcar_50", "Coeff_mice_bal_mcar_30", "Coeff_mice_bal_mcar_10",
"Coeff_mice_bal_mar_50", "Coeff_mice_bal_mar_30", "Coeff_mice_bal_mar_10",
"Coeff_mice_bal_mnar_50", "Coeff_mice_bal_mnar_30", "Coeff_mice_bal_mnar_10",
"Coeff_mice_unbal_mcar_50", "Coeff_mice_unbal_mcar_30", "Coeff_mice_unbal_mcar_10",
"Coeff_mice_unbal_mar_50", "Coeff_mice_unbal_mar_30", "Coeff_mice_unbal_mar_10",
"Coeff_mice_unbal_mnar_50", "Coeff_mice_unbal_mnar_30", "Coeff_mice_unbal_mnar_10",
"Coeff_mitml_bal_mcar_50", "Coeff_mitml_bal_mcar_30", "Coeff_mitml_bal_mcar_10",
"Coeff_mitml_bal_mar_50", "Coeff_mitml_bal_mar_30", "Coeff_mitml_bal_mar_10",
"Coeff_mitml_bal_mnar_50", "Coeff_mitml_bal_mnar_30", "Coeff_mitml_bal_mnar_10",
"Coeff_mitml_unbal_mcar_50", "Coeff_mitml_unbal_mcar_30", "Coeff_mitml_unbal_mcar_10",
"Coeff_mitml_unbal_mar_50", "Coeff_mitml_unbal_mar_30", "Coeff_mitml_unbal_mar_10",
"Coeff_mitml_unbal_mnar_50", "Coeff_mitml_unbal_mnar_30", "Coeff_mitml_unbal_mnar_10",
"Coeff_amelia_bal_mcar_50", "Coeff_amelia_bal_mcar_30", "Coeff_amelia_bal_mcar_10",
"Coeff_amelia_bal_mar_50", "Coeff_amelia_bal_mar_30", "Coeff_amelia_bal_mar_10",
"Coeff_amelia_bal_mnar_50", "Coeff_amelia_bal_mnar_30", "Coeff_amelia_bal_mnar_10",
"Coeff_amelia_unbal_mcar_50", "Coeff_amelia_unbal_mcar_30", "Coeff_amelia_unbal_mcar_10",
"Coeff_amelia_unbal_mar_50", "Coeff_amelia_unbal_mar_30", "Coeff_amelia_unbal_mar_10",
"Coeff_amelia_unbal_mnar_50", "Coeff_amelia_unbal_mnar_30", "Coeff_amelia_unbal_mnar_10",
"Coeff_lstm_bal_mcar_50", "Coeff_lstm_bal_mcar_30", "Coeff_lstm_bal_mcar_10",
"Coeff_lstm_bal_mar_50", "Coeff_lstm_bal_mar_30", "Coeff_lstm_bal_mar_10",
"Coeff_lstm_bal_mnar_50", "Coeff_lstm_bal_mnar_30", "Coeff_lstm_bal_mnar_10",
"Coeff_lstm_unbal_mcar_50", "Coeff_lstm_unbal_mcar_30", "Coeff_lstm_unbal_mcar_10",
"Coeff_lstm_unbal_mar_50", "Coeff_lstm_unbal_mar_30", "Coeff_lstm_unbal_mar_10",
"Coeff_lstm_unbal_mnar_50", "Coeff_lstm_unbal_mnar_30", "Coeff_lstm_unbal_mnar_10"
)
# Initialize an empty dataframe to store results
combined_df <- data.frame(
Name = character(),
EmploymentTypes = numeric(),
Age = numeric(),
MaritalStatus = numeric(),
EmploymentHours = numeric(),
stringsAsFactors = FALSE
)
# Loop through each dataframe, extract coefficients, and add to combined dataframe
for (name in dataframe_names) {
# Retrieve the dataframe by name
df <- get(name)
# Extract coefficients for each variable
EmploymentTypes <- if("EmploymentTypes" %in% rownames(df)) df["EmploymentTypes", "Coefficient"] else NA
Age <- if("Age" %in% rownames(df)) df["Age", "Coefficient"] else NA
MaritalStatus <- if("MaritalStatus" %in% rownames(df)) df["MaritalStatus", "Coefficient"] else NA
EmploymentHours <- if("EmploymentHours" %in% rownames(df)) df["EmploymentHours", "Coefficient"] else NA
# Add a new row to the combined dataframe
combined_df <- rbind(
combined_df,
data.frame(
Name = name,
EmploymentTypes = EmploymentTypes,
Age = Age,
MaritalStatus = MaritalStatus,
EmploymentHours = EmploymentHours
)
)
}
# View the combined dataframe
View(combined_df)
ModelSelection(balanced_panel_data)
ModelSelection(unbalanced_panel_data)
balanced_panel_data_coef
unbalanced_panel_data_coef
# 'EmploymentTypes': employed (0), unemployed (1), and not in workforce (2).
count(data, EmploymentTypes)
# Select the appropriate model
ModelSelection <- function(data) {
# Breusch-Pagan test
BPTest <- plmtest(plm(Income ~ Age + EmploymentTypes, data = data, model = "pooling"), type = "bp")
if (BPTest$p.value > 0.05) {
cat("P-Value:", BPTest$p.value, "\n")
cat("Model: Pooled OLS")
} else {
# Hausman test to check the type of panel effect
RandomEffectModel <- plm(Income ~ Age + EmploymentTypes, data = data, model = "random")
FixedEffectModel <- plm(Income ~ Age + EmploymentTypes + EmploymentHours, data = data, model = "within")
HausmanTest <- phtest(FixedEffectModel, RandomEffectModel)
if (HausmanTest$p.value <= 0.05) {
cat("P-Value:", HausmanTest$p.value, "\n")
cat("Model: Fixed Effect")
} else {
cat("P-Value:", HausmanTest$p.value, "\n")
cat("Model: Random Effect")
}
}
}
ModelSelection(balanced_panel_data)
ModelSelection(unbalanced_panel_data)
# Select the appropriate model
ModelSelection <- function(data) {
# Breusch-Pagan test
BPTest <- plmtest(plm(Income ~ Age + EmploymentTypes + EmploymentHours, data = data, model = "pooling"), type = "bp")
if (BPTest$p.value > 0.05) {
cat("P-Value:", BPTest$p.value, "\n")
cat("Model: Pooled OLS")
} else {
# Hausman test to check the type of panel effect
RandomEffectModel <- plm(Income ~ Age + EmploymentTypes + EmploymentHours, data = data, model = "random")
FixedEffectModel <- plm(Income ~ Age + EmploymentTypes + EmploymentHours, data = data, model = "within") # Check this one
HausmanTest <- phtest(FixedEffectModel, RandomEffectModel)
if (HausmanTest$p.value <= 0.05) {
cat("P-Value:", HausmanTest$p.value, "\n")
cat("Model: Fixed Effect")
} else {
cat("P-Value:", HausmanTest$p.value, "\n")
cat("Model: Random Effect")
}
}
}
ModelSelection(balanced_panel_data)
ModelSelection(unbalanced_panel_data)
balanced_panel_data
# Select the appropriate model
ModelSelection <- function(data) {
# Breusch-Pagan test
BPTest <- plmtest(plm(Income ~ Age + EmploymentTypes + MaritalStatus, data = data, model = "pooling"), type = "bp")
if (BPTest$p.value > 0.05) {
cat("P-Value:", BPTest$p.value, "\n")
cat("Model: Pooled OLS")
} else {
# Hausman test to check the type of panel effect
RandomEffectModel <- plm(Income ~ Age + EmploymentTypes + MaritalStatus, data = data, model = "random")
FixedEffectModel <- plm(Income ~ Age + EmploymentTypes + MaritalStatus, data = data, model = "within") # Check this one
HausmanTest <- phtest(FixedEffectModel, RandomEffectModel)
if (HausmanTest$p.value <= 0.05) {
cat("P-Value:", HausmanTest$p.value, "\n")
cat("Model: Fixed Effect")
} else {
cat("P-Value:", HausmanTest$p.value, "\n")
cat("Model: Random Effect")
}
}
}
ModelSelection(balanced_panel_data)
ModelSelection(unbalanced_panel_data)
# Extract the coefficients
CoefficientsExtraction <- function(data) {
# Fitting the model and extract coefficients
model <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = data, model = "within")
Coefficients <- coef(model)
# Extracting coefficients for each variable
EmploymentTypes <- Coefficients[grep("EmploymentTypes", names(Coefficients))]
Age <- Coefficients["Age"]
MaritalStatus <- Coefficients[grep("MaritalStatus", names(Coefficients))]
EmploymentHours <- Coefficients[grep("EmploymentHours", names(Coefficients))]
# Returning the coefficients as a list or data frame
CoefficientsList <- list(
EmploymentTypes = EmploymentTypes,
Age = Age,
MaritalStatus = MaritalStatus,
EmploymentHours = EmploymentHours
)
return(CoefficientsList)
}
balanced_panel_data_coef <- CoefficientsExtraction(balanced_panel_data)
unbalanced_panel_data_coef <- CoefficientsExtraction(unbalanced_panel_data)
balanced_panel_data_coef
# Extract the coefficients
CoefficientsExtraction <- function(data) {
# Fitting the model and extract coefficients
model <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = data, model = "within")
Coefficients <- coef(model)
# Convert coefficients to a data frame
CoefficientsDF <- data.frame(
Variable = names(Coefficients),
Coefficient = as.numeric(Coefficients),
row.names = NULL
)
return(CoefficientsDF)
}
balanced_panel_data_coef <- CoefficientsExtraction(balanced_panel_data)
unbalanced_panel_data_coef <- CoefficientsExtraction(unbalanced_panel_data)
balanced_panel_data_coef
unbalanced_panel_data_coef
### mice ###
mice_Coff <- function(mice_imp) {
CoList <- list() # Empty list to store the coefficients from individual datasets
for (i in 1:length(mice_imp)) {
pdata <- mice_imp[[i]]
# Fitting the model and extracting coefficients
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = pdata, model = "within")
Coefficients <- coef(FixedEffectModel)
# Storing coefficients directly (no averaging)
CoList[[i]] <- Coefficients
}
# Combine coefficients into a single data frame
CoefficientsDF <- do.call(rbind, lapply(CoList, function(x) {
data.frame(
Variable = names(x),
Coefficient = as.numeric(x),
stringsAsFactors = FALSE
)
}))
# Rubin's Rule: Calculate pooled coefficients
PooledCoefficient <- aggregate(CoefficientsDF$Coefficient, by = list(CoefficientsDF$Variable), FUN = mean)
colnames(PooledCoefficient) <- c("Variable", "PooledCoefficient")
return(PooledCoefficient)
}
# Apply analysis
Coeff_mice_bal_mcar_50 <- mice_Coff(mice_bal_mcar_50)
Coeff_mice_bal_mcar_50
# Apply analysis
Coeff_mice_bal_mcar_50 <- mice_Coff(mice_bal_mcar_50)
Coeff_mice_bal_mcar_30 <- mice_Coff(mice_bal_mcar_30)
Coeff_mice_bal_mcar_10 <- mice_Coff(mice_bal_mcar_10)
Coeff_mice_bal_mar_50 <- mice_Coff(mice_bal_mar_50)
Coeff_mice_bal_mar_30 <- mice_Coff(mice_bal_mar_30)
Coeff_mice_bal_mar_10 <- mice_Coff(mice_bal_mar_10)
Coeff_mice_bal_mnar_50 <- mice_Coff(mice_bal_mnar_50)
Coeff_mice_bal_mnar_30 <- mice_Coff(mice_bal_mnar_30)
Coeff_mice_bal_mnar_10 <- mice_Coff(mice_bal_mnar_10)
Coeff_mice_unbal_mcar_50 <- mice_Coff(mice_unbal_mcar_50)
Coeff_mice_unbal_mcar_30 <- mice_Coff(mice_unbal_mcar_30)
Coeff_mice_unbal_mcar_10 <- mice_Coff(mice_unbal_mcar_10)
Coeff_mice_unbal_mar_50 <- mice_Coff(mice_unbal_mar_50)
Coeff_mice_unbal_mar_30 <- mice_Coff(mice_unbal_mar_30)
Coeff_mice_unbal_mar_10 <- mice_Coff(mice_unbal_mar_10)
Coeff_mice_unbal_mnar_50 <- mice_Coff(mice_unbal_mnar_50)
Coeff_mice_unbal_mnar_30 <- mice_Coff(mice_unbal_mnar_30)
Coeff_mice_unbal_mnar_10 <- mice_Coff(mice_unbal_mnar_10)
Coeff_mice_bal_mcar_50
Coeff_mice_bal_mcar_30
Coeff_mice_bal_mcar_10
Coeff_mice_bal_mar_30
Coeff_mice_unbal_mar_10
### mice ###
mice_Coff <- function(mice_imp) {
CoList <- list() # Empty list to store the coefficients from individual datasets
for (i in 1:length(mice_imp)) {
pdata <- mice_imp[[i]]
# Fitting the model and extracting coefficients
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = pdata, model = "within")
Coefficients <- coef(FixedEffectModel)
CoList[[i]] <- Coefficients
}
# Combine coefficients into a single data frame
CoefficientsDF <- do.call(rbind, lapply(CoList, function(x) {
data.frame(
Variable = names(x),
Coefficient = as.numeric(x),
stringsAsFactors = FALSE
)
}))
# Rubin's Rule: Calculate pooled coefficients
PooledCoefficient <- aggregate(CoefficientsDF$Coefficient, by = list(CoefficientsDF$Variable), FUN = mean)
colnames(PooledCoefficient) <- c("Variable", "PooledCoefficient")
return(CoefficientsDF)
return(PooledCoefficient)
}
# Apply analysis
Coeff_mice_bal_mcar_50 <- mice_Coff(mice_bal_mcar_50)
Coeff_mice_bal_mcar_50
### mice ###
mice_Coff <- function(mice_imp) {
CoList <- list() # Empty list to store the coefficients from individual datasets
for (i in 1:length(mice_imp)) {
pdata <- mice_imp[[i]]
# Fitting the model and extracting coefficients
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = pdata, model = "within")
Coefficients <- coef(FixedEffectModel)
CoList[[i]] <- Coefficients
}
# Combine coefficients into a single data frame
CoefficientsDF <- do.call(rbind, lapply(CoList, function(x) {
data.frame(
Variable = names(x),
Coefficient = as.numeric(x),
stringsAsFactors = FALSE
)
}))
# Rubin's Rule: Calculate pooled coefficients
PooledCoefficient <- aggregate(CoefficientsDF$Coefficient, by = list(CoefficientsDF$Variable), FUN = mean)
colnames(PooledCoefficient) <- c("Variable", "PooledCoefficient")
return(CoefficientsDF)
#return(PooledCoefficient)
}
# Apply analysis
Coeff_mice_bal_mcar_50 <- mice_Coff(mice_bal_mcar_50)
Coeff_mice_bal_mcar_50
### mice ###
mice_Coff <- function(mice_imp) {
CoList <- list() # Empty list to store the coefficients from individual datasets
for (i in 1:length(mice_imp)) {
pdata <- mice_imp[[i]]
# Fitting the model and extracting coefficients
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = pdata, model = "within")
Coefficients <- coef(FixedEffectModel)
CoList[[i]] <- Coefficients
}
# Combine coefficients into a single data frame
CoefficientsDF <- do.call(rbind, lapply(CoList, function(x) {
data.frame(
Variable = names(x),
Coefficient = as.numeric(x),
stringsAsFactors = FALSE
)
}))
# Rubin's Rule: Calculate pooled coefficients
PooledCoefficient <- aggregate(CoefficientsDF$Coefficient, by = list(CoefficientsDF$Variable), FUN = mean)
colnames(PooledCoefficient) <- c("Variable", "Coefficient")
return(PooledCoefficient)
}
# Apply analysis
Coeff_mice_bal_mcar_50 <- mice_Coff(mice_bal_mcar_50)
Coeff_mice_bal_mcar_50
### mice ###
mice_Coff <- function(mice_imp) {
CoList <- list() # Empty list to store the coefficients from individual datasets
for (i in 1:length(mice_imp)) {
pdata <- mice_imp[[i]]
# Fitting the model and extracting coefficients
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = pdata, model = "within")
Coefficients <- coef(FixedEffectModel)
CoList[[i]] <- Coefficients
}
# Combine coefficients into a single data frame
CoefficientsDF <- do.call(rbind, lapply(CoList, function(x) {
data.frame(
Variable = names(x),
Coefficient = as.numeric(x),
stringsAsFactors = FALSE
)
}))
# Rubin's Rule: Calculate pooled coefficients
PooledCoefficient <- aggregate(CoefficientsDF$Coefficient, by = list(CoefficientsDF$Variable), FUN = mean)
colnames(PooledCoefficient) <- c("Variable", "Coefficients")
return(PooledCoefficient)
}
# Apply analysis
Coeff_mice_bal_mcar_50 <- mice_Coff(mice_bal_mcar_50)
Coeff_mice_bal_mcar_50
### mice ###
mice_Coff <- function(mice_imp) {
CoList <- list() # Empty list to store the coefficients from individual datasets
for (i in 1:length(mice_imp)) {
pdata <- mice_imp[[i]]
# Fitting the model and extracting coefficients
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = pdata, model = "within")
Coefficients <- coef(FixedEffectModel)
CoList[[i]] <- Coefficients
}
# Combine coefficients into a single data frame
CoefficientsDF <- do.call(rbind, lapply(CoList, function(x) {
data.frame(
Variable = names(x),
Coefficient = as.numeric(x),
stringsAsFactors = FALSE
)
}))
# Rubin's Rule: Calculate pooled coefficients
PooledCoefficient <- aggregate(CoefficientsDF$Coefficient, by = list(CoefficientsDF$Variable), FUN = mean)
colnames(PooledCoefficient) <- c("Variable", "Coefficients")
return(PooledCoefficient)
}
# Apply analysis
Coeff_mice_bal_mcar_50 <- mice_Coff(mice_bal_mcar_50)
Coeff_mice_bal_mcar_30 <- mice_Coff(mice_bal_mcar_30)
Coeff_mice_bal_mcar_10 <- mice_Coff(mice_bal_mcar_10)
Coeff_mice_bal_mcar_30
balanced_panel_data_coef
balanced_panel_data_coef
### mitml ###
mitml_Coff <- function(mitml_imp) {
CoList <- list() # Empty list to store the coefficients from individual datasets
for (i in 1:length(mitml_imp)) {
pdata <- mitml_imp[[i]]
# Fit the model and extract coefficients
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = pdata, model = "within")
Coefficients <- coef(FixedEffectModel)
# Store coefficients directly without averaging
CoList[[i]] <- Coefficients
}
# Combine coefficients into a single data frame
CoefficientsDF <- do.call(rbind, lapply(CoList, function(x) {
data.frame(
Variable = names(x),
Coefficient = as.numeric(x),
stringsAsFactors = FALSE
)
}))
# Rubin's Rule: Calculate pooled coefficients
PooledCoefficient <- aggregate(CoefficientsDF$Coefficient, by = list(CoefficientsDF$Variable), FUN = mean)
colnames(PooledCoefficient) <- c("Variable", "Coefficients")
return(PooledCoefficient)
}
# Apply the function to each dataset and store results
Coeff_mitml_bal_mcar_50 <- mitml_Coff(mitml_bal_mcar_50)
Coeff_mitml_bal_mcar_50
### amelia ###
amelia_Coff <- function(amelia_imp) {
CoList <- list() # Empty list to store the coefficients from individual datasets
for (i in 1:length(amelia_imp)) {
pdata <- amelia_imp[[i]]
# Fit the model and extract coefficients
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = pdata, model = "within")
Coefficients <- coef(FixedEffectModel)
# Store coefficients directly without averaging
CoList[[i]] <- Coefficients
}
# Combine coefficients into a single data frame
CoefficientsDF <- do.call(rbind, lapply(CoList, function(x) {
data.frame(
Variable = names(x),
Coefficient = as.numeric(x),
stringsAsFactors = FALSE
)
}))
# Rubin's Rule: Calculate pooled coefficients
PooledCoefficient <- aggregate(CoefficientsDF$Coefficient, by = list(CoefficientsDF$Variable), FUN = mean)
colnames(PooledCoefficient) <- c("Variable", "PooledCoefficient")
return(PooledCoefficient)
}
# Apply the function to each dataset and store results
Coeff_amelia_bal_mcar_50 <- amelia_Coff(amelia_bal_mcar_50)
Coeff_amelia_bal_mcar_50
LSTM_Coff <- function(data) {
# Fit the fixed effects model
FixedEffectModel <- plm(Income ~ EmploymentTypes + Age + MaritalStatus + EmploymentHours, data = data, model = "within")
# Extract coefficients directly
Coefficients <- coef(FixedEffectModel)
# Convert coefficients to a data frame
CoefficientsDF <- data.frame(
Variable = names(Coefficients),
Coefficient = as.numeric(Coefficients),
stringsAsFactors = FALSE
)
return(CoefficientsDF)
}
# Apply the function to each dataset and store results
Coeff_lstm_bal_mcar_50 <- LSTM_Coff(lstm_bal_mcar_50)
Coeff_lstm_bal_mcar_50
# Extract the coefficients
CoefficientsExtraction <- function(data) {
# Fitting the model and extract coefficients
model <- plm(Income ~ Age + EmploymentTypes + MaritalStatus + EmploymentHours, data = data, model = "within")
Coefficients <- coef(model)
# Convert coefficients to a data frame
Coefficients <- data.frame(
Variable = names(Coefficients),
Coefficient = as.numeric(Coefficients),
row.names = NULL
)
return(Coefficients)
}
balanced_panel_data_coef <- CoefficientsExtraction(balanced_panel_data)
balanced_panel_data_coef
Coeff_mice_bal_mcar_50
# Extract the coefficients
CoefficientsExtraction <- function(data) {
# Fitting the model and extract coefficients
model <- plm(Income ~ Age + EmploymentHours + EmploymentTypes + MaritalStatus, data = data, model = "within")
Coefficients <- coef(model)
# Convert coefficients to a data frame
Coefficients <- data.frame(
Variable = names(Coefficients),
Coefficient = as.numeric(Coefficients),
row.names = NULL
)
return(Coefficients)
}
balanced_panel_data_coef <- CoefficientsExtraction(balanced_panel_data)
balanced_panel_data_coef
# Apply analysis
Coeff_mice_bal_mcar_50 <- mice_Coff(mice_bal_mcar_50)
Coeff_mice_bal_mcar_50
