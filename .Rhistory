summary(balanced_panel_data_mnar_50)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- .30
balanced_panel_data_mnar_30 <- balanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_30 <- 0.7 + 0.1 * balanced_panel_data_mnar_30$Education +
0.2 * balanced_panel_data_mnar_30$Age +
0.5 * balanced_panel_data_mnar_30$IndividualIncome + rnorm(nrow(balanced_panel_data), 0, 3)
mis_simulated_mnar_30 <- mis_simulated_mnar_30 < quantile(mis_simulated_mnar_30, p_mis_30)
balanced_panel_data_mnar_30$IndividualIncome[mis_simulated_mnar_30] <- NA
summary(balanced_panel_data_mnar_30)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- .10
balanced_panel_data_mnar_10 <- balanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_10 <- 0.1 + 0.1 * balanced_panel_data_mnar_10$Education +
0.2 * balanced_panel_data_mnar_10$Age +
0.5 * balanced_panel_data_mnar_10$IndividualIncome + rnorm(nrow(balanced_panel_data), 0, 3)
mis_simulated_mnar_10 <- mis_simulated_mnar_10 < quantile(mis_simulated_mnar_10, p_mis_10)
balanced_panel_data_mnar_10$IndividualIncome[mis_simulated_mnar_10] <- NA
summary(balanced_panel_data_mnar_10)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
########################
## Missingness in Unalanced Panel
########################
#### MCAR ####
##############
#### 50% ####
p_mis_50 <- 0.50
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_50 <- sample(1:num_rows, p_mis_50 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_50 <- unbalanced_panel_data
unbalanced_panel_data_mcar_50[mis_simulated_mcar_50, 5] <- NA
summary(unbalanced_panel_data_mcar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- 0.30
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_30 <- sample(1:num_rows, p_mis_30 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_30 <- unbalanced_panel_data
unbalanced_panel_data_mcar_30[mis_simulated_mcar_30, 5] <- NA
summary(unbalanced_panel_data_mcar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- 0.10
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_10 <- sample(1:num_rows, p_mis_10 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_10 <- unbalanced_panel_data
unbalanced_panel_data_mcar_10[mis_simulated_mcar_10, 5] <- NA
summary(unbalanced_panel_data_mcar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MAR ####
#############
#### 50% ####
unbalanced_panel_data_mar_50 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.5  # 50% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_50 <- 0.5 + 0.1 * unbalanced_panel_data_mar_50$Education +
0.2 * unbalanced_panel_data_mar_50$Age +
rnorm(nrow(unbalanced_panel_data_mar_50), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_50 <- mis_simulated_mar_50 < quantile(mis_simulated_mar_50, p_mis_50)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_50))
# Set values to NA in IndividualIncome where missingness occurs
unbalanced_panel_data_mar_50$IndividualIncome[mis_simulated_mar_50] <- NA
# Summary of IndividualIncome after introducing missingness
summary(unbalanced_panel_data_mar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
unbalanced_panel_data_mar_30 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.3  # 30% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_30 <- 0.7 + 0.1 * unbalanced_panel_data_mar_30$Education +
0.2 * unbalanced_panel_data_mar_30$Age +
rnorm(nrow(unbalanced_panel_data_mar_30), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_30 <- mis_simulated_mar_30 < quantile(mis_simulated_mar_30, p_mis_30)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_30))
# Set values to NA in IndividualIncome where missingness occurs
unbalanced_panel_data_mar_30$IndividualIncome[mis_simulated_mar_30] <- NA
# Summary of IndividualIncome after introducing missingness
summary(unbalanced_panel_data_mar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
unbalanced_panel_data_mar_10 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.1  # 10% missingness
# Depending on Education, Age, and random error
mis_simulated_mar_10 <- 0.1 + 0.1 * unbalanced_panel_data_mar_10$Education +
0.2 * unbalanced_panel_data_mar_10$Age +
rnorm(nrow(unbalanced_panel_data_mar_10), 0, 3)
# All below the 50% quantile are set to missing
mis_simulated_mar_10 <- mis_simulated_mar_10 < quantile(mis_simulated_mar_10, p_mis_10)
# Proportion of missing data
mean(as.numeric(mis_simulated_mar_10))
# Set values to NA in IndividualIncome where missingness occurs
unbalanced_panel_data_mar_10$IndividualIncome[mis_simulated_mar_10] <- NA
# Summary of IndividualIncome after introducing missingness
summary(unbalanced_panel_data_mar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MNAR ####
##############
#### 50% ####
#### Probabilistic, Linear Regression model, Real data ####
p_mis_50 <- .50
unbalanced_panel_data_mnar_50 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_50 <- 0.5 + 0.1 * unbalanced_panel_data_mnar_50$Education +
0.2 * unbalanced_panel_data_mnar_50$Age +
0.5 * unbalanced_panel_data_mnar_50$IndividualIncome + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_50 <- mis_simulated_mnar_50 < quantile(mis_simulated_mnar_50, p_mis_50)
unbalanced_panel_data_mnar_50$IndividualIncome[mis_simulated_mnar_50] <- NA
summary(unbalanced_panel_data_mnar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- .30
unbalanced_panel_data_mnar_30 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_30 <-0.7 + 0.1 * unbalanced_panel_data_mnar_30$Education +
0.2 * unbalanced_panel_data_mnar_30$Age +
0.5 * unbalanced_panel_data_mnar_30$IndividualIncome + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_30 <- mis_simulated_mnar_30 < quantile(mis_simulated_mnar_30, p_mis_30)
unbalanced_panel_data_mnar_30$IndividualIncome[mis_simulated_mnar_30] <- NA
summary(unbalanced_panel_data_mnar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- .10
unbalanced_panel_data_mnar_10 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_10 <- 0.1 + 0.1 * unbalanced_panel_data_mnar_10$Education +
0.2 * unbalanced_panel_data_mnar_10$Age +
0.5 * unbalanced_panel_data_mnar_10$IndividualIncome + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_10 <- mis_simulated_mnar_10 < quantile(mis_simulated_mnar_10, p_mis_10)
unbalanced_panel_data_mnar_10$IndividualIncome[mis_simulated_mnar_10] <- NA
summary(unbalanced_panel_data_mnar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
###################
### Data Sets Overview and Formating
###################
## Format Vriable to Their Originl Format
balanced_panel_data_mcar_50$ID <- as.factor(balanced_panel_data_mcar_50$ID)
balanced_panel_data_mcar_50$Year <- as.factor(balanced_panel_data_mcar_50$Year)
balanced_panel_data_mcar_50$Education <- as.factor(balanced_panel_data_mcar_50$Education)
balanced_panel_data_mcar_30$ID <- as.factor(balanced_panel_data_mcar_30$ID)
balanced_panel_data_mcar_30$Year <- as.factor(balanced_panel_data_mcar_30$Year)
balanced_panel_data_mcar_30$Education <- as.factor(balanced_panel_data_mcar_30$Education)
balanced_panel_data_mcar_10$ID <- as.factor(balanced_panel_data_mcar_10$ID)
balanced_panel_data_mcar_10$Year <- as.factor(balanced_panel_data_mcar_10$Year)
balanced_panel_data_mcar_10$Education <- as.factor(balanced_panel_data_mcar_10$Education)
balanced_panel_data_mar_50$ID <- as.factor(balanced_panel_data_mar_50$ID)
balanced_panel_data_mar_50$Year <- as.factor(balanced_panel_data_mar_50$Year)
balanced_panel_data_mar_50$Education <- as.factor(balanced_panel_data_mar_50$Education)
balanced_panel_data_mar_30$ID <- as.factor(balanced_panel_data_mar_30$ID)
balanced_panel_data_mar_30$Year <- as.factor(balanced_panel_data_mar_30$Year)
balanced_panel_data_mar_30$Education <- as.factor(balanced_panel_data_mar_30$Education)
balanced_panel_data_mar_10$ID <- as.factor(balanced_panel_data_mar_10$ID)
balanced_panel_data_mar_10$Year <- as.factor(balanced_panel_data_mar_10$Year)
balanced_panel_data_mar_10$Education <- as.factor(balanced_panel_data_mar_10$Education)
balanced_panel_data_mnar_50$ID <- as.factor(balanced_panel_data_mnar_50$ID)
balanced_panel_data_mnar_50$Year <- as.factor(balanced_panel_data_mnar_50$Year)
balanced_panel_data_mnar_50$Education <- as.factor(balanced_panel_data_mnar_50$Education)
balanced_panel_data_mnar_30$ID <- as.factor(balanced_panel_data_mnar_30$ID)
balanced_panel_data_mnar_30$Year <- as.factor(balanced_panel_data_mnar_30$Year)
balanced_panel_data_mnar_30$Education <- as.factor(balanced_panel_data_mnar_30$Education)
balanced_panel_data_mnar_10$ID <- as.factor(balanced_panel_data_mnar_10$ID)
balanced_panel_data_mnar_10$Year <- as.factor(balanced_panel_data_mnar_10$Year)
balanced_panel_data_mnar_10$Education <- as.factor(balanced_panel_data_mnar_10$Education)
unbalanced_panel_data_mcar_50$ID <- as.factor(unbalanced_panel_data_mcar_50$ID)
unbalanced_panel_data_mcar_50$Year <- as.factor(unbalanced_panel_data_mcar_50$Year)
unbalanced_panel_data_mcar_50$Education <- as.factor(unbalanced_panel_data_mcar_50$Education)
unbalanced_panel_data_mcar_30$ID <- as.factor(unbalanced_panel_data_mcar_30$ID)
unbalanced_panel_data_mcar_30$Year <- as.factor(unbalanced_panel_data_mcar_30$Year)
unbalanced_panel_data_mcar_30$Education <- as.factor(unbalanced_panel_data_mcar_30$Education)
unbalanced_panel_data_mcar_10$ID <- as.factor(unbalanced_panel_data_mcar_10$ID)
unbalanced_panel_data_mcar_10$Year <- as.factor(unbalanced_panel_data_mcar_10$Year)
unbalanced_panel_data_mcar_10$Education <- as.factor(unbalanced_panel_data_mcar_10$Education)
unbalanced_panel_data_mar_50$ID <- as.factor(unbalanced_panel_data_mar_50$ID)
unbalanced_panel_data_mar_50$Year <- as.factor(unbalanced_panel_data_mar_50$Year)
unbalanced_panel_data_mar_50$Education <- as.factor(unbalanced_panel_data_mar_50$Education)
unbalanced_panel_data_mar_30$ID <- as.factor(unbalanced_panel_data_mar_30$ID)
unbalanced_panel_data_mar_30$Year <- as.factor(unbalanced_panel_data_mar_30$Year)
unbalanced_panel_data_mar_30$Education <- as.factor(unbalanced_panel_data_mar_30$Education)
unbalanced_panel_data_mar_10$ID <- as.factor(unbalanced_panel_data_mar_10$ID)
unbalanced_panel_data_mar_10$Year <- as.factor(unbalanced_panel_data_mar_10$Year)
unbalanced_panel_data_mar_10$Education <- as.factor(unbalanced_panel_data_mar_10$Education)
unbalanced_panel_data_mnar_50$ID <- as.factor(unbalanced_panel_data_mnar_50$ID)
unbalanced_panel_data_mnar_50$Year <- as.factor(unbalanced_panel_data_mnar_50$Year)
unbalanced_panel_data_mnar_50$Education <- as.factor(unbalanced_panel_data_mnar_50$Education)
unbalanced_panel_data_mnar_30$ID <- as.factor(unbalanced_panel_data_mnar_30$ID)
unbalanced_panel_data_mnar_30$Year <- as.factor(unbalanced_panel_data_mnar_30$Year)
unbalanced_panel_data_mnar_30$Education <- as.factor(unbalanced_panel_data_mnar_30$Education)
unbalanced_panel_data_mnar_10$ID <- as.factor(unbalanced_panel_data_mnar_10$ID)
unbalanced_panel_data_mnar_10$Year <- as.factor(unbalanced_panel_data_mnar_10$Year)
unbalanced_panel_data_mnar_10$Education <- as.factor(unbalanced_panel_data_mnar_10$Education)
# balanced_panel_data_mcar_50
# balanced_panel_data_mcar_30
# balanced_panel_data_mcar_10
# balanced_panel_data_mar_50
# balanced_panel_data_mar_30
# balanced_panel_data_mar_10
# balanced_panel_data_mnar_50
# balanced_panel_data_mnar_30
# balanced_panel_data_mnar_10
# unbalanced_panel_data_mcar_50
# unbalanced_panel_data_mcar_30
# unbalanced_panel_data_mcar_10
# unbalanced_panel_data_mar_50
# unbalanced_panel_data_mar_30
# unbalanced_panel_data_mar_10
# unbalanced_panel_data_mnar_50
# unbalanced_panel_data_mnar_30
# unbalanced_panel_data_mnar_10
library(mitml)
library(dplyr)
library(plm)
library(lmtest)
# Define a function to perform the imputation, model fitting, and additional steps
Data_Imputation_mitml_Bal <- function(panel_data) {
# Step 1: Prepare the data by selecting relevant columns
selected_data <- panel_data[c("ID", "Year", "Education", "Age", "IndividualIncome")]
# Define the type vector and assign column names
type <- c(0, -2, 2, 2, 1)
names(type) <- colnames(selected_data)
# Impute missing data
imputed_data <- panImpute(selected_data, type = type, n.burn = 1000, n.iter = 100, m = 3)
# Extract imputed datasets
imputed_list <- mitmlComplete(imputed_data, print = "all")
# Step 2: Perform Breusch-Pagan test to check for a panel effect
breusch_pagan_results <- lapply(imputed_list, function(x) {
pdata <- pdata.frame(x, index = c("ID", "Year"))
bp_test <- plmtest(plm(IndividualIncome ~ Education + Age, data = pdata, model = "pooling"), type = "bp")
return(bp_test$p.value)
})
# Step 3: Based on Breusch-Pagan test, perform the appropriate regression
model_list <- lapply(1:length(imputed_list), function(i) {
pdata <- pdata.frame(imputed_list[[i]], index = c("ID", "Year"))
if (breusch_pagan_results[[i]] > 0.05) {
# No panel effect, proceed with Pooled OLS model
return(plm(IndividualIncome ~ Year + Education + Age, data = pdata, model = "pooling"))
} else {
# Panel effect exists, proceed to Hausman test
random_model <- plm(IndividualIncome ~ Year + Education + Age, data = pdata, model = "random")
fixed_model <- plm(IndividualIncome ~ Year + Education + Age, data = pdata, model = "within")
# Perform Hausman test
hausman_test <- phtest(fixed_model, random_model)
if (hausman_test$p.value <= 0.05) {
# Correlation exists, use Fixed Effects Model
print("Fixed Effect Model:")
return(fixed_model)
} else {
# No correlation, use Random Effects Model
print("Random Effect Model:")
return(random_model)
}
}
})
# Step 4: Pool the results
pooled_results <- testEstimates(model_list)
# Return the pooled results summary
return(summary(pooled_results))
}
# Apply the function to each dataset in the list and store results
Data_Imputation_mitml_Bal(balanced_panel_data_mcar_50)
Data_Imputation_mitml_Bal(balanced_panel_data_mcar_30)
# Define a function to perform the imputation, model fitting, and additional steps
Data_Imputation_mitml_Unbal <- function(panel_data) {
# Step 1: Prepare the data by ungrouping and selecting relevant columns
panel_data <- panel_data %>%
ungroup()
selected_data <- as.data.frame(panel_data[c("ID", "Year", "Education", "Age", "IndividualIncome")])
# Define the type vector and assign column names
type <- c(0, -2, 2, 2, 1)  # 0: ID, -2: Year, 2: continuous variable, 1: dependent variable
names(type) <- colnames(selected_data)
# Impute missing data
imputed_data <- panImpute(selected_data, type = type, n.burn = 1000, n.iter = 100, m = 3)
# Extract imputed datasets
imputed_list <- mitmlComplete(imputed_data, print = "all")
# Step 2: Perform Breusch-Pagan test to check for a panel effect
breusch_pagan_results <- lapply(imputed_list, function(x) {
pdata <- pdata.frame(x, index = c("ID", "Year"))
bp_test <- plmtest(plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "pooling"), type = "bp")
return(bp_test$p.value)
})
# Step 3: Based on Breusch-Pagan test, perform the appropriate regression
model_list <- lapply(1:length(imputed_list), function(i) {
pdata <- pdata.frame(imputed_list[[i]], index = c("ID", "Year"))
if (breusch_pagan_results[[i]] > 0.05) {
# No panel effect, proceed with Pooled OLS model
return(plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "pooling"))
} else {
# Panel effect exists, proceed to Hausman test
random_model <- plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "random")
fixed_model <- plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "within")
# Perform Hausman test
hausman_test <- phtest(fixed_model, random_model)
if (hausman_test$p.value <= 0.05) {
# Correlation exists, use Fixed Effects Model
return(fixed_model)
} else {
# No correlation, use Random Effects Model
return(random_model)
}
}
})
# Step 4: Pool the results
pooled_results <- testEstimates(model_list)
# Return the pooled results summary
return(summary(pooled_results))
}
# Apply the function to each dataset in the list and store results
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mcar_50)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mcar_30)
# Apply the function to each dataset in the list and store results
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mcar_50)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mcar_30)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mcar_10)
# Define a function to perform the imputation, model fitting, and additional steps
Data_Imputation_mitml_Unbal <- function(panel_data) {
# Step 1: Prepare the data by ungrouping and selecting relevant columns
panel_data <- panel_data %>%
ungroup()
selected_data <- as.data.frame(panel_data[c("ID", "Year", "Education", "Age", "IndividualIncome")])
# Define the type vector and assign column names
type <- c(0, -2, 2, 2, 1)  # 0: ID, -2: Year, 2: continuous variable, 1: dependent variable
names(type) <- colnames(selected_data)
# Impute missing data
imputed_data <- panImpute(selected_data, type = type, n.burn = 1000, n.iter = 100, m = 3)
# Extract imputed datasets
imputed_list <- mitmlComplete(imputed_data, print = "all")
# Step 2: Perform Breusch-Pagan test to check for a panel effect
breusch_pagan_results <- lapply(imputed_list, function(x) {
pdata <- pdata.frame(x, index = c("ID", "Year"))
bp_test <- plmtest(plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "pooling"), type = "bp")
return(bp_test$p.value)
})
# Step 3: Based on Breusch-Pagan test, perform the appropriate regression
model_list <- lapply(1:length(imputed_list), function(i) {
pdata <- pdata.frame(imputed_list[[i]], index = c("ID", "Year"))
if (breusch_pagan_results[[i]] > 0.05) {
# No panel effect, proceed with Pooled OLS model
return(plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "pooling"))
} else {
# Panel effect exists, proceed to Hausman test
random_model <- plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "random")
fixed_model <- plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "within")
# Perform Hausman test
hausman_test <- phtest(fixed_model, random_model)
if (hausman_test$p.value <= 0.05) {
# Correlation exists, use Fixed Effects Model
print(Fixed Effects)
# Define a function to perform the imputation, model fitting, and additional steps
Data_Imputation_mitml_Unbal <- function(panel_data) {
# Step 1: Prepare the data by ungrouping and selecting relevant columns
panel_data <- panel_data %>%
ungroup()
selected_data <- as.data.frame(panel_data[c("ID", "Year", "Education", "Age", "IndividualIncome")])
# Define the type vector and assign column names
type <- c(0, -2, 2, 2, 1)  # 0: ID, -2: Year, 2: continuous variable, 1: dependent variable
names(type) <- colnames(selected_data)
# Impute missing data
imputed_data <- panImpute(selected_data, type = type, n.burn = 1000, n.iter = 100, m = 3)
# Extract imputed datasets
imputed_list <- mitmlComplete(imputed_data, print = "all")
# Step 2: Perform Breusch-Pagan test to check for a panel effect
breusch_pagan_results <- lapply(imputed_list, function(x) {
pdata <- pdata.frame(x, index = c("ID", "Year"))
bp_test <- plmtest(plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "pooling"), type = "bp")
return(bp_test$p.value)
})
# Step 3: Based on Breusch-Pagan test, perform the appropriate regression
model_list <- lapply(1:length(imputed_list), function(i) {
pdata <- pdata.frame(imputed_list[[i]], index = c("ID", "Year"))
if (breusch_pagan_results[[i]] > 0.05) {
# No panel effect, proceed with Pooled OLS model
return(plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "pooling"))
} else {
# Panel effect exists, proceed to Hausman test
random_model <- plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "random")
fixed_model <- plm(IndividualIncome ~  Year + Education + Age, data = pdata, model = "within")
# Perform Hausman test
hausman_test <- phtest(fixed_model, random_model)
if (hausman_test$p.value <= 0.05) {
# Correlation exists, use Fixed Effects Model
print("Fixed Effects")
return(fixed_model)
} else {
# No correlation, use Random Effects Model
print("Random Effects")
return(random_model)
}
}
})
# Step 4: Pool the results
pooled_results <- testEstimates(model_list)
# Return the pooled results summary
return(summary(pooled_results))
}
# Apply the function to each dataset in the list and store results
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mcar_50)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mcar_30)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mcar_10)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mar_50)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mar_30)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mar_10)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mnar_50)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mnar_30)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mnar_50)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mnar_30)
Data_Imputation_mitml_Unbal(unbalanced_panel_data_mnar_10)
unbalanced_panel_data_mnar_50
