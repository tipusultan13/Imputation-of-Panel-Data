# Visualize the missing data pattern
aggr(balanced_panel_data_mar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
balanced_panel_data_mar_10 <- balanced_panel_data
set.seed(123)
p_mis_50 <- 0.1  # 10% missingness
# Depending on EmploymentTypes, Age, and random error
mis_simulated_mar_10 <- 0.1 + 0.1 * balanced_panel_data_mar_10$EmploymentTypes +
0.2 * balanced_panel_data_mar_10$Age +
rnorm(nrow(balanced_panel_data_mar_10), 0, 3)
mis_simulated_mar_10 <- mis_simulated_mar_10 < quantile(mis_simulated_mar_10, p_mis_10) # All below the 50% quantile are set to missing
mean(as.numeric(mis_simulated_mar_10))
balanced_panel_data_mar_10$Income[mis_simulated_mar_10] <- NA # Set values to NA in Income where missingness occurs
summary(balanced_panel_data_mar_10)
# Visualize the missing data pattern
aggr(balanced_panel_data_mar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MNAR ####
##############
#### Probabilistic, Linear Regression model ####
#### 50% ####
p_mis_50 <- .50
balanced_panel_data_mnar_50 <- balanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_50 <- 0.5 + .2 * balanced_panel_data_mnar_50$EmploymentTypes +
0.1 * balanced_panel_data_mnar_50$Age +
0.5 * balanced_panel_data_mnar_50$Income + rnorm(nrow(balanced_panel_data), 0, 3)
mis_simulated_mnar_50 <- mis_simulated_mnar_50 < quantile(mis_simulated_mnar_50, p_mis_50)
balanced_panel_data_mnar_50$Income[mis_simulated_mnar_50] <- NA
summary(balanced_panel_data_mnar_50)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- .30
balanced_panel_data_mnar_30 <- balanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_30 <- 0.7 + 0.1 * balanced_panel_data_mnar_30$EmploymentTypes +
0.2 * balanced_panel_data_mnar_30$Age +
0.5 * balanced_panel_data_mnar_30$Income + rnorm(nrow(balanced_panel_data), 0, 3)
mis_simulated_mnar_30 <- mis_simulated_mnar_30 < quantile(mis_simulated_mnar_30, p_mis_30)
balanced_panel_data_mnar_30$Income[mis_simulated_mnar_30] <- NA
summary(balanced_panel_data_mnar_30)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- .10
balanced_panel_data_mnar_10 <- balanced_panel_data
# the missing of a value now also depends on Income itself
mis_simulated_mnar_10 <- 0.1 + 0.1 * balanced_panel_data_mnar_10$EmploymentTypes +
0.2 * balanced_panel_data_mnar_10$Age +
0.5 * balanced_panel_data_mnar_10$Income + rnorm(nrow(balanced_panel_data), 0, 3)
mis_simulated_mnar_10 <- mis_simulated_mnar_10 < quantile(mis_simulated_mnar_10, p_mis_10)
balanced_panel_data_mnar_10$Income[mis_simulated_mnar_10] <- NA
summary(balanced_panel_data_mnar_10)
# Visualize the missing data pattern
aggr(balanced_panel_data_mnar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(balanced_panel_data_mnar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
###########################################
## Simulating Missingness in Unalanced Panel
###########################################
#### MCAR ####
##############
#### 50% ####
p_mis_50 <- 0.50
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_50 <- sample(1:num_rows, p_mis_50 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_50 <- unbalanced_panel_data
unbalanced_panel_data_mcar_50[mis_simulated_mcar_50, 4] <- NA
summary(unbalanced_panel_data_mcar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- 0.30
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_30 <- sample(1:num_rows, p_mis_30 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_30 <- unbalanced_panel_data
unbalanced_panel_data_mcar_30[mis_simulated_mcar_30, 4] <- NA
summary(unbalanced_panel_data_mcar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- 0.10
num_rows <- nrow(unbalanced_panel_data)  # Get the number of rows in balanced_panel_data
mis_simulated_mcar_10 <- sample(1:num_rows, p_mis_10 * num_rows, replace = FALSE)
unbalanced_panel_data_mcar_10 <- unbalanced_panel_data
unbalanced_panel_data_mcar_10[mis_simulated_mcar_10, 4] <- NA
summary(unbalanced_panel_data_mcar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mcar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mcar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MAR ####
#############
#### 50% ####
unbalanced_panel_data_mar_50 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.5  # 50% missingness
# Depending on EmploymentTypes, Age, and random error
mis_simulated_mar_50 <- 0.5 + 0.1 * unbalanced_panel_data_mar_50$EmploymentTypes +
0.2 * unbalanced_panel_data_mar_50$Age +
rnorm(nrow(unbalanced_panel_data_mar_50), 0, 3)
mis_simulated_mar_50 <- mis_simulated_mar_50 < quantile(mis_simulated_mar_50, p_mis_50) # All below the 50% quantile are set to missing
mean(as.numeric(mis_simulated_mar_50))
unbalanced_panel_data_mar_50$Income[mis_simulated_mar_50] <- NA # Set values to NA in Income where missingness occurs
summary(unbalanced_panel_data_mar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
unbalanced_panel_data_mar_30 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.3  # 30% missingness
# Depending on EmploymentTypes, Age, and random error
mis_simulated_mar_30 <- 0.7 + 0.1 * unbalanced_panel_data_mar_30$EmploymentTypes +
0.2 * unbalanced_panel_data_mar_30$Age +
rnorm(nrow(unbalanced_panel_data_mar_30), 0, 3)
mis_simulated_mar_30 <- mis_simulated_mar_30 < quantile(mis_simulated_mar_30, p_mis_30) # All below the 50% quantile are set to missing
mean(as.numeric(mis_simulated_mar_30))
unbalanced_panel_data_mar_30$Income[mis_simulated_mar_30] <- NA # Set values to NA in Income where missingness occurs
summary(unbalanced_panel_data_mar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
unbalanced_panel_data_mar_10 <- unbalanced_panel_data
set.seed(123)
p_mis_50 <- 0.1  # 10% missingness
# Depending on EmploymentTypes, Age, and random error
mis_simulated_mar_10 <- 0.1 + 0.1 * unbalanced_panel_data_mar_10$EmploymentTypes +
0.2 * unbalanced_panel_data_mar_10$Age +
rnorm(nrow(unbalanced_panel_data_mar_10), 0, 3)
mis_simulated_mar_10 <- mis_simulated_mar_10 < quantile(mis_simulated_mar_10, p_mis_10) # All below the 50% quantile are set to missing
mean(as.numeric(mis_simulated_mar_10))
unbalanced_panel_data_mar_10$Income[mis_simulated_mar_10] <- NA # Set values to NA in Income where missingness occurs
summary(unbalanced_panel_data_mar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### MNAR ####
##############
#### 50% ####
p_mis_50 <- .50
unbalanced_panel_data_mnar_50 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_50 <- 0.5 + 0.1 * unbalanced_panel_data_mnar_50$EmploymentTypes +
0.2 * unbalanced_panel_data_mnar_50$Age +
0.5 * unbalanced_panel_data_mnar_50$Income + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_50 <- mis_simulated_mnar_50 < quantile(mis_simulated_mnar_50, p_mis_50)
unbalanced_panel_data_mnar_50$Income[mis_simulated_mnar_50] <- NA
summary(unbalanced_panel_data_mnar_50)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_50,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_50),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 30% ####
p_mis_30 <- .30
unbalanced_panel_data_mnar_30 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_30 <-0.7 + 0.1 * unbalanced_panel_data_mnar_30$EmploymentTypes +
0.2 * unbalanced_panel_data_mnar_30$Age +
0.5 * unbalanced_panel_data_mnar_30$Income + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_30 <- mis_simulated_mnar_30 < quantile(mis_simulated_mnar_30, p_mis_30)
unbalanced_panel_data_mnar_30$Income[mis_simulated_mnar_30] <- NA
summary(unbalanced_panel_data_mnar_30)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_30,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_30),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#### 10% ####
p_mis_10 <- .10
unbalanced_panel_data_mnar_10 <- unbalanced_panel_data
# the missing of a value now also depends on IndividualIncome itself
mis_simulated_mnar_10 <- 0.1 + 0.1 * unbalanced_panel_data_mnar_10$EmploymentTypes +
0.2 * unbalanced_panel_data_mnar_10$Age +
0.5 * unbalanced_panel_data_mnar_10$Income + rnorm(nrow(unbalanced_panel_data), 0, 3)
mis_simulated_mnar_10 <- mis_simulated_mnar_10 < quantile(mis_simulated_mnar_10, p_mis_10)
unbalanced_panel_data_mnar_10$Income[mis_simulated_mnar_10] <- NA
summary(unbalanced_panel_data_mnar_10)
# Visualize the missing data pattern
aggr(unbalanced_panel_data_mnar_10,
col = c('navyblue', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(unbalanced_panel_data_mnar_10),
cex.axis = .7,
gap = 3,
ylab = c("Missing data", "Pattern"))
#####################################
### Datasets Overview and Formating
####################################
## Format Vriable to Their Originl Format
convert_DataTypes <- function(df) {
df$ID <- as.factor(df$ID)
df$Year <- as.factor(df$Year)
df$age <- as.integer(df$Age)
df$EmploymentTypes <- as.factor(df$EmploymentTypes)
df$Income <- as.numeric(df$Income)
df$MaritalStatus <- as.factor(df$MaritalStatus)
df$EmploymentHours <- as.factor(df$EmploymentHours)
df$Education <- as.factor(df$Education)
df$Sex <- as.factor(df$Sex)
df <- pdata.frame(df, index = c("ID", "Year")) # Convert the data frame to a panel data frame
df <- df[c("ID", "Year", "Age", "EmploymentTypes", "Income", "MaritalStatus", "EmploymentHours", "Education", "Sex")]
return(df)
}
balanced_panel_data <- convert_DataTypes(balanced_panel_data)
unbalanced_panel_data <- convert_DataTypes(unbalanced_panel_data)
balanced_panel_data_mcar_50 <- convert_DataTypes(balanced_panel_data_mcar_50)
balanced_panel_data_mcar_30 <- convert_DataTypes(balanced_panel_data_mcar_30)
balanced_panel_data_mcar_10 <- convert_DataTypes(balanced_panel_data_mcar_10)
balanced_panel_data_mar_50 <- convert_DataTypes(balanced_panel_data_mar_50)
balanced_panel_data_mar_30 <- convert_DataTypes(balanced_panel_data_mar_30)
balanced_panel_data_mar_10 <- convert_DataTypes(balanced_panel_data_mar_10)
balanced_panel_data_mnar_50 <- convert_DataTypes(balanced_panel_data_mnar_50)
balanced_panel_data_mnar_30 <- convert_DataTypes(balanced_panel_data_mnar_30)
balanced_panel_data_mnar_10 <- convert_DataTypes(balanced_panel_data_mnar_10)
unbalanced_panel_data_mcar_50 <- convert_DataTypes(unbalanced_panel_data_mcar_50)
unbalanced_panel_data_mcar_30 <- convert_DataTypes(unbalanced_panel_data_mcar_30)
unbalanced_panel_data_mcar_10 <- convert_DataTypes(unbalanced_panel_data_mcar_10)
unbalanced_panel_data_mar_50 <- convert_DataTypes(unbalanced_panel_data_mar_50)
unbalanced_panel_data_mar_30 <- convert_DataTypes(unbalanced_panel_data_mar_30)
unbalanced_panel_data_mar_10 <- convert_DataTypes(unbalanced_panel_data_mar_10)
unbalanced_panel_data_mnar_50 <- convert_DataTypes(unbalanced_panel_data_mnar_50)
unbalanced_panel_data_mnar_30 <- convert_DataTypes(unbalanced_panel_data_mnar_30)
unbalanced_panel_data_mnar_10 <- convert_DataTypes(unbalanced_panel_data_mnar_10)
# balanced_panel_data_mcar_50
# balanced_panel_data_mcar_30
# balanced_panel_data_mcar_10
# balanced_panel_data_mar_50
# balanced_panel_data_mar_30
# balanced_panel_data_mar_10
# balanced_panel_data_mnar_50
# balanced_panel_data_mnar_30
# balanced_panel_data_mnar_10
# unbalanced_panel_data_mcar_50
# unbalanced_panel_data_mcar_30
# unbalanced_panel_data_mcar_10
# unbalanced_panel_data_mar_50
# unbalanced_panel_data_mar_30
# unbalanced_panel_data_mar_10
# unbalanced_panel_data_mnar_50
# unbalanced_panel_data_mnar_30
# unbalanced_panel_data_mnar_10
######################
## Data Imputation
######################
## mice ##
##########
packageVersion("mice")
StartTime_mice <- Sys.time()  # Starting time
Data_Imputation_mice <- function(data, IDColumn = "ID", TargetColumn = "Income",
LaggedColumns = c("EmploymentTypes", "MaritalStatus", "Sex", "Income"),
m = 5, maxit = 100, method = "pmm") {
# Making ID factor and year numeric for proper lagging
data[[IDColumn]] <- as.factor(data[[IDColumn]])
data$Year <- as.numeric(data$Year)
# Generate lagging variables
for (col in LaggedColumns) {
LaggedNames <- paste0("lag_", col)
data <- data %>%
group_by(!!sym(IDColumn)) %>%
arrange(Year, .by_group = TRUE) %>%
mutate(!!sym(LaggedNames) := lag(!!sym(col))) %>%
ungroup()
}
# Remove the rows due to existing missing values in other columns. For example: first year for each ID
LaggedVars <- paste0("lag_", LaggedColumns)
data <- data %>% filter(rowSums(is.na(select(., all_of(LaggedVars)))) == 0)
PredMat <- make.predictorMatrix(data) # matrix of predictors
PredMat[, IDColumn] <- 0 # Remove ID from the list of predictors
PredMat[, ] <- 0
PredMat[colnames(PredMat) %in% c("lag_EmploymentTypes", "lag_MaritalStatus",
"lag_Sex", "lag_Income", "Age"), TargetColumn] <- 1
ImputedData <- mice(data, m = m, maxit = maxit, method = method, predictorMatrix = PredMat) # Implement mice
# Get the original rows and the imputed Income
CompletedData <- lapply(1:m, function(i) complete(ImputedData, action = i))
OriginalColumns <- c("ID", "Year", "Age", "EmploymentTypes", "Income", "MaritalStatus",
"EmploymentHours", "Education", "Sex")
CompletedData <- lapply(CompletedData, function(df) df[, OriginalColumns])
return(CompletedData)
}
# Apply imputation
mice_bal_mcar_50 <- Data_Imputation_mice(balanced_panel_data_mcar_50)
# Define a function to plot conditional distributions
CondDist_mice <- function(data, col, by_var, legend_title) {
levels <- unique(data[[by_var]])
colors <- rainbow(length(levels))
plot(NULL, xlim = range(data$Income, na.rm = TRUE), ylim = c(0, 0.02),
xlab = "Income", ylab = "Density", main = paste("Conditional Distribution by", by_var))
for (i in seq_along(levels)) {
level_data <- data[data[[by_var]] == levels[i], ]
density_data <- density(level_data$Income, na.rm = TRUE)
lines(density_data, col = colors[i], lwd = 2)
}
legend("topright", legend = levels, col = colors, lwd = 2, cex = 0.8, title = legend_title)
}
##### mice #####
###############
miceData <- function(data) {
CombinedData <- do.call(rbind, data)
return(CombinedData)
}
# Data Combination
mice_imp_bal_mcar_50 <- miceData(mice_bal_mcar_50)
# plot distribution
IncDist_mice <- function(data, col){
DataTemp_mice <- density(data$Income, na.rm = TRUE)
lines(DataTemp_mice, col = col, lwd = 2)
}
DataTemp_mice <- density(balanced_panel_data$Income, na.rm = TRUE)
par(mfrow = c(2, 3))
plot(DataTemp_mice,
main = "Income Distributions from mice - Balanced panel (MNAR)",
xlab = "Income",
ylab = "Density",
lwd = 2, col = "black")
IncDist_mice(mice_imp_bal_mcar_50, "blue")
par(mfrow = c(1, 1))
# Define a function to plot conditional distributions
CondDist_mice <- function(data, col, by_var, legend_title) {
levels <- unique(data[[by_var]])
colors <- rainbow(length(levels))
plot(NULL, xlim = range(data$Income, na.rm = TRUE), ylim = c(0, 0.02),
xlab = "Income", ylab = "Density", main = paste("Conditional Distribution by", by_var))
for (i in seq_along(levels)) {
level_data <- data[data[[by_var]] == levels[i], ]
density_data <- density(level_data$Income, na.rm = TRUE)
lines(density_data, col = colors[i], lwd = 2)
}
legend("topright", legend = levels, col = colors, lwd = 2, cex = 0.8, title = legend_title)
}
# Conditional distribution for Age
CondDist_mice(balanced_panel_data, col = "black", by_var = "Age", legend_title = "Age Groups")
# Conditional distribution for EmploymentTypes
CondDist_mice(balanced_panel_data, col = "black", by_var = "EmploymentTypes", legend_title = "Employment Types")
# Step 1: Bin the Income variable into quartiles
balanced_panel_data <- balanced_panel_data %>%
mutate(Income_Bin = cut(Income,
breaks = quantile(Income, probs = seq(0, 1, 0.25), na.rm = TRUE),
include.lowest = TRUE,
labels = c("Low", "Mid-Low", "Mid-High", "High")))
# Load the ggplot2 package
library(ggplot2)
# Simple density plot conditioned on Species
ggplot(iris, aes(x = Sepal.Length, fill = Species)) +
geom_density(alpha = 0.5) +
labs(
title = "Conditional Distribution of Sepal Length by Species",
x = "Sepal Length",
y = "Density"
) +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Scatter plot with two numeric variables and one factor
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point(size = 3, alpha = 0.7) +
labs(
title = "Scatter Plot of Sepal Dimensions by Species",
x = "Sepal Length",
y = "Sepal Width"
) +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Boxplot with two numeric variables and one factor
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = cut(Sepal.Width, breaks = 3))) +
geom_boxplot() +
labs(
title = "Boxplot of Sepal Length by Species and Sepal Width Groups",
x = "Species",
y = "Sepal Length",
fill = "Sepal Width Groups"
) +
theme_minimal()
# MaritalStatus: Single (1), Married (2), Widowed (3), Divorced (4)
count(data, MaritalStatus)
# 'EmploymentTypes': employed (0), unemployed (1), and not in workforce (2).
count(data, EmploymentTypes)
#################################
# Load ggplot2 package
library(ggplot2)
# Boxplot to show Income dependency on EmploymentTypes and Age
ggplot(mice_imp_bal_mcar_50, aes(x = factor(EmploymentTypes), y = Income, fill = factor(EmploymentTypes))) +
geom_boxplot() +
facet_wrap(~ cut(Age, breaks = 4), scales = "free", ncol = 2) +
labs(
title = "Income Distribution by Employment Types and Age Groups",
x = "Employment Types",
y = "Income",
fill = "Employment Types"
) +
theme_minimal()
# MaritalStatus: Single (1), Married (2), Widowed (3), Divorced (4)
count(data, MaritalStatus)
library(ggplot2)
# Boxplot to show Income dependency on MaritalStatus and Age
ggplot(mice_imp_bal_mcar_50, aes(x = factor(MaritalStatus), y = Income, fill = factor(MaritalStatus))) +
geom_boxplot() +
facet_wrap(~ cut(Age, breaks = 4), scales = "free", ncol = 2) +
labs(
title = "Income Distribution by Marital Status and Age Groups",
x = "Marital Status",
y = "Income",
fill = "Marital Status"
) +
theme_minimal()
# Load ggplot2 package
library(ggplot2)
# Boxplot with adjustments for visibility
ggplot(mice_imp_bal_mcar_50, aes(x = factor(MaritalStatus), y = Income, fill = factor(MaritalStatus))) +
geom_boxplot(outlier.size = 2, outlier.colour = "red") + # Adjust outlier size and color
facet_wrap(~ cut(Age, breaks = 4), scales = "free", ncol = 2) + # Facet by age group
coord_cartesian(ylim = c(0, 12)) +  # Adjust y-axis to zoom in (modify limits as needed)
labs(
title = "Income Distribution by Marital Status and Age Groups",
x = "Marital Status",
y = "Income",
fill = "Marital Status"
) +
theme_minimal()
# Density plot with adjusted fill based on MaritalStatus
ggplot(mice_imp_bal_mcar_50, aes(x = Income, fill = factor(MaritalStatus))) +
geom_density(alpha = 0.6) +  # Adjust transparency to make overlapping clearer
facet_wrap(~ cut(Age, breaks = 4), scales = "free", ncol = 2) + # Facet by age group
labs(
title = "Income Distribution by Marital Status and Age Groups",
x = "Income",
y = "Density",
fill = "Marital Status"
) +
theme_minimal()
